-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0A8F;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8277;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 8259;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4A9E;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4A9B;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4A9B;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 128D;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 528D;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4A9C;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0A8F;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT		RESETPOS	
           01D : 0ABA;  -- 	LOAD 	EEEE
           01E : 1350;  -- 	STORE	CURRENTSENSOR				
           01F : 0A8F;  -- 	LOAD	Zero
           020 : 1351;  -- 	STORE	CURRENTANGLE			
           021 : 0A90;  -- 	LOAD	One
           022 : 1352;  -- 	STORE	LEFT
           023 : 0ABC;  -- 	LOAD	FFFF
           024 : 1353;  -- 	STORE	SENSOR0
           025 : 0ABC;  -- 	LOAD	FFFF
           026 : 1354;  -- 	STORE	SENSOR2
           027 : 0ABC;  -- 	LOAD	FFFF
           028 : 1355;  -- 	STORE	SENSOR3
           029 : 0ABC;  -- 	LOAD	FFFF
           02A : 1356;  -- 	STORE	SENSOR5
           02B : 0ABC;  -- 	LOAD	FFFF
           02C : 1357;  -- 	STORE 	TEMPDIST
           02D : 0ABC;  -- 	LOAD	FFFF
           02E : 1358;  -- 	STORE	TEMPORARY 
           02F : 0A8F;  -- 	LOAD	Zero
           030 : 135A;  -- 	STORE	X
           031 : 135B;  -- 	STORE	Y
           032 : 135C;  -- 	STORE	TEMPVAR
           033 : 135D;  -- 	STORE	HOMEDIST
           034 : 135E;  -- 	STORE	HOMEANGLE
           035 : 135F;  -- 	STORE	CALCX
           036 : 1360;  -- 	STORE	CALCY
           037 : 1361;  -- 	STORE	TEMPTHETA
           038 : 1362;  -- 	STORE	GOHOMEX
           039 : 1363;  -- 	STORE	GOHOMEY
           03A : 1364;  -- 	STORE	TEMPHOME
           03B : 1359;  -- 	STORE	CALCTHETA
           03C : 10B3;  -- 	STORE	TEMPX
           03D : 10B4;  -- 	STORE	TEMPY
           03E : 10E0;  -- 	STORE	CORRECTANGLE
           03F : 1365;  -- 	STORE	FOUND
           040 : 0A9A;  -- 	LOAD 	Mask0				; ENABLES SENSOR 0, 2, 3, 5
           041 : 529F;  -- 	OR		Mask5	
           042 : 98B2;  --   	OUT 	SONAREN 
           043 : 2844;  --   	JUMP	GO4FEET
           044 : 90C2;  -- 	IN 		THETA			
           045 : 9805;  -- 	OUT		SSEG2
           046 : 0AAD;  -- 	LOAD   	FMid        		; GO FORWARD
           047 : 9883;  -- 	OUT    	LVELCMD     
           048 : 988B;  -- 	OUT    	RVELCMD	
           049 : 90C0;  -- 	IN		XPOS				; GET XPOS OF THE ROBOT
           04A : 22A6;  -- 	SUB		TwoFeet				; SUBTRACT 4 FEET
           04B : 3044;  -- 	JNEG	GO4FEET				; IF YOU HAVE NOT GONE 4 FEET, JUMP UP
           04C : 284D;  -- 	JUMP	ROTATE				; IF YOU HAVE GONE 4 FEET, START ROTATION		
           04D : 0AAD;  -- 	LOAD	FMid				; START CALCULATION FOR ROTATING 90 DEGREES TO THE LEFT
           04E : 988B;  -- 	OUT		RVELCMD
           04F : 90C2;  -- 	IN 		THETA 
           050 : 1359;  -- 	STORE	CALCTHETA
           051 : 6F4C;  -- 	ADDI	-180
           052 : 3854;  -- 	JPOS	ADJUST				; ROBOT ROTATED SLIGHTLY TO THE RIGHT. NEED TO ADJUST THETA
           053 : 2858;  -- 	JUMP	ROTATE2				; DO NOT NEED TO ADJUST THETA. ROTATE
           054 : 0B59;  -- 	LOAD	CALCTHETA
           055 : 6E99;  -- 	ADDI	-359
           056 : 1359;  -- 	STORE	CALCTHETA
           057 : 2858;  -- 	JUMP	ROTATE2			
           058 : 90C2;  -- 	IN 		THETA			
           059 : 9805;  -- 	OUT		SSEG2
           05A : 0B59;  -- 	LOAD	CALCTHETA			 
           05B : 6FC4;  -- 	ADDI	-60
           05C : 304D;  -- 	JNEG	ROTATE				; IF YOU HAVE NOT ROTATE ENOUGH, ROTATE AGAIN
           05D : 285E;  -- 	JUMP	FORWARD				; IF YOU HAVE ROTATED 90 DEGREES, GO FORWARD
           05E : 90C2;  -- 	IN 		THETA			
           05F : 9805;  -- 	OUT		SSEG2
           060 : 0AAD;  -- 	LOAD	FMid				; GO FORWARD
           061 : 9883;  -- 	OUT    	LVELCMD     		; MOVE FORWARD
           062 : 988B;  -- 	OUT    	RVELCMD	
           063 : 2864;  -- 	JUMP	SEARCH0				; SEARCH FOR THINGS NEAR SONAR0
           064 : 0ABA;  -- 	LOAD	EEEE				; THIS IS THE "CLOSEST" OBJECT
           065 : 1350;  -- 	STORE	CURRENTSENSOR
           066 : 90A8;  -- 	IN 		DIST0				; STORE THE VALUE OF DIST0 TO SENSOR0, IF THERE IS SOMETHING 4 FEET AWAY 
           067 : 1357;  -- 	STORE	TEMPDIST
           068 : 1358;  -- 	STORE	TEMPORARY
           069 : 0B58;  -- 	LOAD	TEMPORARY
           06A : 22A6;  -- 	SUB		TWOFEET
           06B : 22A6;  -- 	SUB		TWOFEET		
           06C : 387E;  -- 	JPOS	SEARCH5				; IF THERE IS NOTHING 4 FEET AWAY, MORE FORWARD
           06D : 306E;  -- 	JNEG	FOUND0				; THERE IS SOMETHING CLOSE BY, STORE IT TO SENSOR0
           06E : 0A90;  -- 	LOAD	One
           06F : 1365;  -- 	STORE	FOUND
           070 : 0B57;  -- 	LOAD	TEMPDIST			; IT SENSES SOMETHING, GO TO FINDSMALL
           071 : 1353;  -- 	STORE	SENSOR0
           072 : 2873;  -- 	JUMP 	FINDSMALL0		
           073 : 0B50;  -- 	LOAD	CURRENTSENSOR		; IS SONAR0 THE CLOSEST OBJECT?
           074 : 2353;  -- 	SUB		SENSOR0
           075 : 3877;  -- 	JPOS	CHOSE0				; IF SENSOR0 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR0 AS THE CLOSEST
           076 : 307E;  -- 	JNEG	SEARCH5				; ELSE, IS THERE SOMETHING IN SENSOR5? (GUARANTEED TO HAVE A SMALL?)
           077 : 0B53;  -- 	LOAD	SENSOR0
           078 : 1350;  -- 	STORE	CURRENTSENSOR
           079 : 0AB4;  -- 	LOAD	NINTY
           07A : 1351;  -- 	STORE	CURRENTANGLE
           07B : 0A90;  -- 	LOAD	One
           07C : 1352;  -- 	STORE	LEFT
           07D : 287E;  -- 	JUMP	SEARCH5
           07E : 90AD;  -- 	IN 		DIST5				; STORE THE VALUE OF DIST0 TO SENSOR5, IF THERE IS SOMETHING 4 FEET AWAY 
           07F : 1357;  -- 	STORE	TEMPDIST
           080 : 1358;  -- 	STORE	TEMPORARY
           081 : 0B58;  -- 	LOAD	TEMPORARY
           082 : 22A6;  -- 	SUB		TWOFEET
           083 : 22A6;  -- 	SUB		TWOFEET		
           084 : 3088;  -- 	JNEG	FOUND5				; FOUND SOMETHING IN SENSOR5
           085 : 0B65;  -- 	LOAD	FOUND				; DID NOT FIND ANYTHING IN SENSOR5, BUT THERE WAS SOMETHING FOUND PREVIOUSLY
           086 : 405E;  -- 	JZERO	FORWARD
           087 : 3898;  -- 	JPOS	ROTATETOWARDSOBJECT
           088 : 0A90;  -- 	LOAD	One
           089 : 1365;  -- 	STORE	FOUND
           08A : 0B57;  -- 	LOAD	TEMPDIST			
           08B : 1356;  -- 	STORE	SENSOR5
           08C : 288D;  -- 	JUMP 	FINDSMALL5
           08D : 0B50;  -- 	LOAD	CURRENTSENSOR 		; IS SENSOR5 CLOSER THAN THE CURRENT SMALLEST?
           08E : 2356;  -- 	SUB		SENSOR5
           08F : 3891;  -- 	JPOS	CHOSE5				; IF SENSOR5 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR5 AS THE CLOSEST
           090 : 3098;  -- 	JNEG	ROTATETOWARDSOBJECT	; ELSE, ROTATE TOWARDS THE CLOSEST OBJECT. GUARANTEED TO HAVE ONE AT THIS POINT 
           091 : 0B56;  -- 	LOAD	SENSOR5				; STORE SENSOR5 AS THE CLOSEST OBEJCT AND 90 AS THE ANGLE
           092 : 1350;  -- 	STORE	CURRENTSENSOR
           093 : 0AB7;  -- 	LOAD	NEGNINTY
           094 : 1351;  -- 	STORE	CURRENTANGLE
           095 : 0A8F;  -- 	LOAD	Zero
           096 : 1352;  -- 	STORE	LEFT
           097 : 2898;  -- 	JUMP	ROTATETOWARDSOBJECT
           098 : 90C2;  -- 	IN 		THETA			
           099 : 9805;  -- 	OUT		SSEG2
           09A : 0B52;  -- 	LOAD	LEFT				; IF ON THE RIGHT OF THE ROBOT, TURN RIGHT; LEFT=0 MEANS THAT IT IS ON THE RIGHT
           09B : 409E;  -- 	JZERO	ROTATERIGHT
           09C : 6FFF;  -- 	ADDI	-1					; IF ON THE LEFT OF THE ROBOT, TURN LEFT
           09D : 40A6;  -- 	JZERO	ROTATELEFT
           09E : 90C2;  -- 	IN 		THETA			
           09F : 9805;  -- 	OUT		SSEG2
           0A0 : 0AAD;  -- 	LOAD	FMid				
           0A1 : 9883;  -- 	OUT 	LVELCMD	
           0A2 : 90C2;  -- 	IN 		THETA
           0A3 : 2351;  -- 	SUB		CURRENTANGLE
           0A4 : 309E;  -- 	JNEG	ROTATERIGHT
           0A5 : 28AE;  -- 	JUMP	MOVESETUP
           0A6 : 90C2;  -- 	IN 		THETA			
           0A7 : 9805;  -- 	OUT		SSEG2
           0A8 : 0AAD;  -- 	LOAD	FMid			
           0A9 : 988B;  -- 	OUT		RVELCMD
           0AA : 90C2;  -- 	IN 		THETA 
           0AB : 2351;  -- 	SUB		CURRENTANGLE	
           0AC : 30A6;  -- 	JNEG	ROTATELEFT
           0AD : 28AE;  -- 	JUMP	MOVESETUP	
           0AE : 90C0;  -- 	IN		XPOS				; STORE THE CURRENT X POSITION OF THE ROBOT
           0AF : 135A;  -- 	STORE	X
           0B0 : 90C1;  -- 	IN		YPOS				; STORE THE CURRENT Y POSITION OF THE ROBOT
           0B1 : 135B;  -- 	STORE	Y
           0B2 : 28B5;  -- 	JUMP 	MOVETOWARDSOBJECT
           0B3 : 0000;  -- TEMPX:		DW		0
           0B4 : 0000;  -- TEMPY:		DW		0
           0B5 : 90C2;  -- 	IN 		THETA			
           0B6 : 9805;  -- 	OUT		SSEG2
           0B7 : 0AAD;  -- 	LOAD	FMid				; MOVE FORWARD
           0B8 : 9883;  -- 	OUT    	LVELCMD     
           0B9 : 988B;  -- 	OUT    	RVELCMD	
           0BA : 0B50;  -- 	LOAD	CURRENTSENSOR		; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           0BB : 135C;  -- 	STORE 	TEMPVAR
           0BC : 90C0;  -- 	IN 		XPOS
           0BD : 10B3;  -- 	STORE	TEMPX
           0BE : 90C1;  -- 	IN		YPOS
           0BF : 10B4;  -- 	STORE	TEMPY
           0C0 : 0B5A;  -- 	LOAD	X					; L2X <- (X-XPOS) 
           0C1 : 20B3;  -- 	SUB		TEMPX				
           0C2 : 124E;  -- 	STORE	L2X
           0C3 : 0B5B;  -- 	LOAD	Y					; L2Y <- (Y-YPOS)
           0C4 : 20B4;  -- 	SUB		TEMPY
           0C5 : 124F;  -- 	STORE	L2Y
           0C6 : 8224;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((X-XPOS)^2+(Y-YPOS)^2)
           0C7 : 235C;  -- 	SUB		TEMPVAR				; DISTANCE TO CLOSEST OBJECT
           0C8 : 1ABD;  -- 	ADD		HALFFEET			; FOR CALIBRATION
           0C9 : 30B5;  -- 	JNEG	MOVETOWARDSOBJECT	; IF ROBOT HAS NOT ROTATED FAR ENOUGH, REPEAT
           0CA : 90C2;  -- 	IN		THETA					
           0CB : 1361;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER ROTATING TOWARDS OBJECT
           0CC : 28CD;  -- 	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           0CD : 90C0;  -- 	IN		XPOS				; HOMEANGLE = ARCTAN(CALCX/CALCY)
           0CE : 11BC;  -- 	STORE	AtanX 
           0CF : 90C1;  -- 	IN		YPOS
           0D0 : 11BD;  -- 	STORE 	AtanY
           0D1 : 815D;  -- 	CALL	Atan2
           0D2 : 135E;  -- 	STORE	HOMEANGLE		
           0D3 : 0AA8;  -- 	LOAD	Deg180				; ANGLE FOR ROTATING RIGHT
           0D4 : 1B5E;  -- 	ADD		HOMEANGLE			; CORRECTANGLE = 180 + HOMEANGLE + 20
           0D5 : 6814;  -- 	ADDI	20					; FOR ADJUSTMENTS
           0D6 : 10E0;  -- 	STORE	CORRECTANGLE
           0D7 : 08E0;  -- 	LOAD	CORRECTANGLE		
           0D8 : 9804;  -- 	OUT		SSEG1
           0D9 : 90C2;  -- 	IN		THETA
           0DA : 9805;  -- 	OUT		SSEG2
           0DB : 0B52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE RIGHT OF THE ROBOT, TURN RIGHT TO FACE HOME
           0DC : 40E2;  -- 	JZERO	HOMEROTATERIGHT
           0DD : 0B52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE LEFT OF THE ROBOT, TURN LEFT TO FACE HOME
           0DE : 6FFF;  -- 	ADDI	-1
           0DF : 40F2;  -- 	JZERO	HOMEROTATELEFT
           0E0 : 0000;  -- CORRECTANGLE:		DW		0
           0E1 : 0000;  -- VARVAR:				DW		0
           0E2 : 0AAD;  -- 	LOAD	FMid
           0E3 : 9883;  -- 	OUT 	LVELCMD
           0E4 : 08E0;  -- 	LOAD	CORRECTANGLE		
           0E5 : 9804;  -- 	OUT		SSEG1
           0E6 : 90C2;  -- 	IN 		THETA			
           0E7 : 9805;  -- 	OUT		SSEG2
           0E8 : 90C2;  -- 	IN		THETA				; ROTATE RIGHT UNTIL ROBOT FACES HOME
           0E9 : 20E0;  -- 	SUB		CORRECTANGLE
           0EA : 38E2;  -- 	JPOS	HOMEROTATERIGHT
           0EB : 90C0;  -- 	IN 		XPOS				
           0EC : 1362;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           0ED : 90C1;  -- 	IN		YPOS
           0EE : 1363;  -- 	STORE	GOHOMEY				; Y POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           0EF : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           0F0 : 1361;  -- 	STORE	TEMPTHETA
           0F1 : 28FF;  -- 	JUMP	CALCHOMEDIST
           0F2 : 0AAD;  -- 	LOAD	FMid				; ROTATE CORRECT DEGREES TO THE LEFT
           0F3 : 988B;  -- 	OUT		RVELCMD
           0F4 : 90C2;  -- 	IN 		THETA 
           0F5 : 2361;  -- 	SUB		TEMPTHETA
           0F6 : 235E;  -- 	SUB		HOMEANGLE	
           0F7 : 30F2;  -- 	JNEG	HOMEROTATELEFT
           0F8 : 90C0;  -- 	IN 		XPOS				
           0F9 : 1362;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           0FA : 90C1;  -- 	IN		YPOS
           0FB : 1363;  -- 	STORE	GOHOMEY	
           0FC : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           0FD : 1361;  -- 	STORE	TEMPTHETA
           0FE : 28FF;  -- 	JUMP	CALCHOMEDIST
           0FF : 90C0;  -- 	IN		XPOS
           100 : 124E;  -- 	STORE 	L2X
           101 : 90C1;  -- 	IN		YPOS
           102 : 124F;  -- 	STORE	L2Y
           103 : 8224;  -- 	CALL	L2Estimate			
           104 : 135D;  -- 	STORE	HOMEDIST			; HOMEDIST = SQRT((RESETX-XPOS)^2+(RESETX-YPOS)^2)
           105 : 2906;  -- 	JUMP	GOHOME
           106 : 90C2;  -- 	IN 		THETA			
           107 : 9805;  -- 	OUT		SSEG2
           108 : 0AAD;  -- 	LOAD	FMid				; MOVE FORWARD
           109 : 9883;  -- 	OUT    	LVELCMD     
           10A : 988B;  -- 	OUT    	RVELCMD	
           10B : 90C0;  -- 	IN		XPOS
           10C : 10B3;  -- 	STORE	TEMPX
           10D : 90C1;  -- 	IN		YPOS
           10E : 10B4;  -- 	STORE	TEMPY
           10F : 0B5D;  -- 	LOAD	HOMEDIST			; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           110 : 1364;  -- 	STORE 	TEMPHOME
           111 : 0B62;  -- 	LOAD	GOHOMEX				; L2X <- (GOHOMEX-XPOS) 
           112 : 20B3;  -- 	SUB		TEMPX				
           113 : 124E;  -- 	STORE	L2X
           114 : 0B63;  -- 	LOAD	GOHOMEY				; L2Y <- (GOHOMEY-YPOS)
           115 : 20B4;  -- 	SUB		TEMPY
           116 : 124F;  -- 	STORE	L2Y
           117 : 8224;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((XPOS-X)^2+(YPOS-Y)^2)
           118 : 2364;  -- 	SUB		TEMPHOME	
           119 : 1ABD;  -- 	ADD		HALFFEET		
           11A : 3106;  -- 	JNEG	GOHOME	
           11B : 8253;  -- 	CALL	WAIT1
           11C : 8253;  -- 	CALL	WAIT1
           11D : 8253;  -- 	CALL	WAIT1
           11E : 8253;  -- 	CALL	WAIT1
           11F : 8253;  -- 	CALL 	WAIT1
           120 : 2928;  -- 	JUMP 	DIE
           121 : 0800;  -- 	LOAD	0
           122 : 980A;  -- 	OUT		BEEP	
           123 : 2921;  -- 	JUMP 	NOISE
           124 : 0800;  -- 	LOAD	0
           125 : 9883;  -- 	OUT    	LVELCMD     
           126 : 988B;  -- 	OUT    	RVELCMD	
           127 : 2924;  -- 	JUMP 	NOPE
           128 : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           129 : 0A8F;  -- 	LOAD   Zero         ; Stop everything.
           12A : 9883;  -- 	OUT    LVELCMD
           12B : 988B;  -- 	OUT    RVELCMD
           12C : 98B2;  -- 	OUT    SONAREN
           12D : 0930;  -- 	LOAD   DEAD         ; An indication that we are dead
           12E : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           12F : 292F;  -- 	JUMP   Forever      ; Do this forever.
           130 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           131 : 8135;  -- 	CALL   ControlMovement
           132 : B000;  -- 	RETI   ; return from ISR
           133 : 0000;  -- DTheta:    DW 0
           134 : 0000;  -- DVel:      DW 0
           135 : 90C2;  -- 	IN     THETA
           136 : 2133;  -- 	SUB    DTheta      ; actual - desired angle
           137 : 815A;  -- 	CALL   Neg         ; desired - actual angle
           138 : 68B4;  -- 	ADDI   180
           139 : 8153;  -- 	CALL   Mod360
           13A : 6F4C;  -- 	ADDI   -180
           13B : 6002;  -- 	SHIFT  2
           13C : 1147;  -- 	STORE  CMAErr      ; hold temporarily
           13D : 0934;  -- 	LOAD   DVel
           13E : 1947;  -- 	ADD    CMAErr
           13F : 8148;  -- 	CALL   CapVel      ; ensure velocity is valid
           140 : 988B;  -- 	OUT    RVELCMD
           141 : 0947;  -- 	LOAD   CMAErr
           142 : 815A;  -- 	CALL   Neg         ; left wheel gets negative differential
           143 : 1934;  -- 	ADD    DVel
           144 : 8148;  -- 	CALL   CapVel
           145 : 9883;  -- 	OUT    LVELCMD
           146 : 8800;  -- 	RETURN
           147 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           148 : 6E0C;  -- 	ADDI    -500
           149 : 394F;  -- 	JPOS    CapVelHigh
           14A : 69F4;  -- 	ADDI    500
           14B : 69F4;  -- 	ADDI    500
           14C : 3151;  -- 	JNEG    CapVelLow
           14D : 6E0C;  -- 	ADDI    -500
           14E : 8800;  -- 	RETURN
           14F : B9F4;  -- 	LOADI   500
           150 : 8800;  -- 	RETURN
           151 : BE0C;  -- 	LOADI   -500
           152 : 8800;  -- 	RETURN
           153 : 3156;  -- 	JNEG   M360N
           154 : 6E98;  -- 	ADDI   -360
           155 : 2953;  -- 	JUMP   Mod360
           156 : 6968;  -- 	ADDI   360
           157 : 3156;  -- 	JNEG   M360N
           158 : 8800;  -- 	RETURN
           159 : 395C;  -- 	JPOS   Abs_r
           15A : 5A8E;  -- 	XOR    NegOne       ; Flip all bits
           15B : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           15C : 8800;  -- 	RETURN
           15D : 09BD;  -- 	LOAD   AtanY
           15E : 8159;  -- 	CALL   Abs          ; abs(y)
           15F : 11BF;  -- 	STORE  AtanT
           160 : 09BC;  -- 	LOAD   AtanX        ; abs(x)
           161 : 8159;  -- 	CALL   Abs
           162 : 21BF;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           163 : 316E;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           164 : 09BC;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           165 : 316B;  -- 	JNEG   A2_R3
           166 : 817D;  -- 	CALL   A2_calc      ; Octants 1, 8
           167 : 3169;  -- 	JNEG   A2_R1n
           168 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           169 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           16A : 8800;  -- 	RETURN
           16B : 817D;  -- 	CALL   A2_calc      ; Octants 4, 5            
           16C : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           16D : 8800;  -- 	RETURN
           16E : 09BD;  -- 	LOAD   AtanY        ; Swap input arguments
           16F : 11BF;  -- 	STORE  AtanT
           170 : 09BC;  -- 	LOAD   AtanX
           171 : 11BD;  -- 	STORE  AtanY
           172 : 09BF;  -- 	LOAD   AtanT
           173 : 11BC;  -- 	STORE  AtanX
           174 : 3979;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           175 : 817D;  -- 	CALL   A2_calc      ; else octants 6, 7
           176 : 815A;  -- 	CALL   Neg          ; Negatge the number
           177 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           178 : 8800;  -- 	RETURN
           179 : 817D;  -- 	CALL   A2_calc      ; Octants 2, 3
           17A : 815A;  -- 	CALL   Neg          ; negate the angle
           17B : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           17C : 8800;  -- 	RETURN
           17D : 09BD;  -- 	LOAD   AtanY
           17E : 121C;  -- 	STORE  d16sN        ; Y in numerator
           17F : 09BC;  -- 	LOAD   AtanX
           180 : 121D;  -- 	STORE  d16sD        ; X in denominator
           181 : 81A9;  -- 	CALL   A2_div       ; divide
           182 : 0A22;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           183 : 11BE;  -- 	STORE  AtanRatio
           184 : 11E5;  -- 	STORE  m16sA
           185 : 11E6;  -- 	STORE  m16sB
           186 : 81A0;  -- 	CALL   A2_mult      ; X^2
           187 : 11E5;  -- 	STORE  m16sA
           188 : 09C0;  -- 	LOAD   A2c
           189 : 11E6;  -- 	STORE  m16sB
           18A : 81A0;  -- 	CALL   A2_mult
           18B : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           18C : 121D;  -- 	STORE  d16sD
           18D : 09BE;  -- 	LOAD   AtanRatio
           18E : 121C;  -- 	STORE  d16sN        ; Ratio in numerator
           18F : 81A9;  -- 	CALL   A2_div       ; divide
           190 : 0A22;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           191 : 11E5;  -- 	STORE  m16sA        ; <= result in radians
           192 : 09C1;  -- 	LOAD   A2cd         ; degree conversion factor
           193 : 11E6;  -- 	STORE  m16sB
           194 : 81A0;  -- 	CALL   A2_mult      ; convert to degrees
           195 : 11BF;  -- 	STORE  AtanT
           196 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           197 : 4A90;  -- 	AND    One
           198 : 419D;  -- 	JZERO  A2_rdwn      ; round down
           199 : 09BF;  -- 	LOAD   AtanT
           19A : 6018;  -- 	SHIFT  -8
           19B : 6801;  -- 	ADDI   1            ; round up
           19C : 8800;  -- 	RETURN
           19D : 09BF;  -- 	LOAD   AtanT
           19E : 6018;  -- 	SHIFT  -8           ; round down
           19F : 8800;  -- 	RETURN
           1A0 : 81C2;  -- 	CALL   Mult16s
           1A1 : 09EA;  -- 	LOAD   mres16sH
           1A2 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1A3 : 11EA;  -- 	STORE  mres16sH
           1A4 : 09E9;  -- 	LOAD   mres16sL
           1A5 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1A6 : 4AA2;  -- 	AND    LowByte
           1A7 : 51EA;  -- 	OR     mres16sH     ; combine high and low words of result
           1A8 : 8800;  -- 	RETURN
           1A9 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1AA : 11BF;  -- 	STORE  AtanT
           1AB : 09BF;  -- 	LOAD   AtanT
           1AC : 6FFF;  -- 	ADDI   -1
           1AD : 39B0;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1AE : 81EB;  -- 	CALL   Div16s       ; do the standard division
           1AF : 8800;  -- 	RETURN
           1B0 : 11BF;  -- 	STORE  AtanT
           1B1 : 0A1C;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1B2 : 6001;  -- 	SHIFT  1
           1B3 : 5A1C;  -- 	XOR    d16sN        ; if the sign changed,
           1B4 : 31B8;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1B5 : 5A1C;  -- 	XOR    d16sN        ; get back shifted version
           1B6 : 121C;  -- 	STORE  d16sN
           1B7 : 29AB;  -- 	JUMP   A2_DL
           1B8 : 0A1D;  -- 	LOAD   d16sD
           1B9 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1BA : 121D;  -- 	STORE  d16sD
           1BB : 29AB;  -- 	JUMP   A2_DL
           1BC : 0000;  -- AtanX:      DW 0
           1BD : 0000;  -- AtanY:      DW 0
           1BE : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1BF : 0000;  -- AtanT:      DW 0        ; temporary value
           1C0 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1C1 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1C2 : B800;  -- 	LOADI  0
           1C3 : 11E7;  -- 	STORE  m16sc        ; clear carry
           1C4 : 11EA;  -- 	STORE  mres16sH     ; clear result
           1C5 : B810;  -- 	LOADI  16           ; load 16 to counter
           1C6 : 11E8;  -- 	STORE  mcnt16s      
           1C7 : 09E7;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1C8 : 41CC;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1C9 : 09EA;  -- 	LOAD   mres16sH     ; if a carry, 
           1CA : 19E5;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1CB : 11EA;  -- 	STORE  mres16sH
           1CC : 09E6;  -- 	LOAD   m16sB
           1CD : 4A90;  -- 	AND    One          ; check bit 0 of multiplier
           1CE : 11E7;  -- 	STORE  m16sc        ; save as next carry
           1CF : 41D3;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1D0 : 09EA;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1D1 : 21E5;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1D2 : 11EA;  -- 	STORE  mres16sH
           1D3 : 09E6;  -- 	LOAD   m16sB
           1D4 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1D5 : 49E4;  -- 	AND    c7FFF        ; clear msb
           1D6 : 11E6;  -- 	STORE  m16sB
           1D7 : 09EA;  -- 	LOAD   mres16sH     ; load result H
           1D8 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1D9 : 51E6;  -- 	OR     m16sB
           1DA : 11E6;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1DB : 09EA;  -- 	LOAD   mres16sH
           1DC : 6011;  -- 	SHIFT  -1
           1DD : 11EA;  -- 	STORE  mres16sH     ; shift result H >>1
           1DE : 09E8;  -- 	LOAD   mcnt16s
           1DF : 6FFF;  -- 	ADDI   -1           ; check counter
           1E0 : 39C6;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1E1 : 09E6;  -- 	LOAD   m16sB
           1E2 : 11E9;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1E3 : 8800;  -- 	RETURN              ; Done
           1E4 : 7FFF;  -- c7FFF: DW &H7FFF
           1E5 : 0000;  -- m16sA: DW 0 ; multiplicand
           1E6 : 0000;  -- m16sB: DW 0 ; multipler
           1E7 : 0000;  -- m16sc: DW 0 ; carry
           1E8 : 0000;  -- mcnt16s: DW 0 ; counter
           1E9 : 0000;  -- mres16sL: DW 0 ; result low
           1EA : 0000;  -- mres16sH: DW 0 ; result high
           1EB : B800;  -- 	LOADI  0
           1EC : 1223;  -- 	STORE  dres16sR     ; clear remainder result
           1ED : 1220;  -- 	STORE  d16sC1       ; clear carry
           1EE : 0A1C;  -- 	LOAD   d16sN
           1EF : 5A1D;  -- 	XOR    d16sD
           1F0 : 121E;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1F1 : B811;  -- 	LOADI  17
           1F2 : 121F;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1F3 : 0A1D;  -- 	LOAD   d16sD
           1F4 : 8159;  -- 	CALL   Abs          ; take absolute value of denominator
           1F5 : 121D;  -- 	STORE  d16sD
           1F6 : 0A1C;  -- 	LOAD   d16sN
           1F7 : 8159;  -- 	CALL   Abs          ; take absolute value of numerator
           1F8 : 121C;  -- 	STORE  d16sN
           1F9 : 0A1C;  -- 	LOAD   d16sN
           1FA : 601F;  -- 	SHIFT  -15          ; get msb
           1FB : 4A90;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1FC : 1221;  -- 	STORE  d16sC2       ; store as carry
           1FD : 0A1C;  -- 	LOAD   d16sN
           1FE : 6001;  -- 	SHIFT  1            ; shift <<1
           1FF : 5220;  -- 	OR     d16sC1       ; with carry
           200 : 121C;  -- 	STORE  d16sN
           201 : 0A1F;  -- 	LOAD   d16sT
           202 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           203 : 4213;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           204 : 121F;  -- 	STORE  d16sT
           205 : 0A23;  -- 	LOAD   dres16sR
           206 : 6001;  -- 	SHIFT  1            ; shift remainder
           207 : 5221;  -- 	OR     d16sC2       ; with carry from other shift
           208 : 221D;  -- 	SUB    d16sD        ; subtract denominator from remainder
           209 : 320E;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           20A : 1223;  -- 	STORE  dres16sR
           20B : B801;  -- 	LOADI  1
           20C : 1220;  -- 	STORE  d16sC1       ; set carry
           20D : 29F9;  -- 	JUMP   Div16s_loop
           20E : 1A1D;  -- 	ADD    d16sD        ; add denominator back in
           20F : 1223;  -- 	STORE  dres16sR
           210 : B800;  -- 	LOADI  0
           211 : 1220;  -- 	STORE  d16sC1       ; clear carry
           212 : 29F9;  -- 	JUMP   Div16s_loop
           213 : 0A1C;  -- 	LOAD   d16sN
           214 : 1222;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           215 : 0A1E;  -- 	LOAD   d16sS        ; check the sign indicator
           216 : 3218;  -- 	JNEG   Div16s_neg
           217 : 8800;  -- 	RETURN
           218 : 0A22;  -- 	LOAD   dres16sQ     ; need to negate the result
           219 : 815A;  -- 	CALL   Neg
           21A : 1222;  -- 	STORE  dres16sQ
           21B : 8800;  -- 	RETURN	
           21C : 0000;  -- d16sN: DW 0 ; numerator
           21D : 0000;  -- d16sD: DW 0 ; denominator
           21E : 0000;  -- d16sS: DW 0 ; sign value
           21F : 0000;  -- d16sT: DW 0 ; temp counter
           220 : 0000;  -- d16sC1: DW 0 ; carry value
           221 : 0000;  -- d16sC2: DW 0 ; carry value
           222 : 0000;  -- dres16sQ: DW 0 ; quotient result
           223 : 0000;  -- dres16sR: DW 0 ; remainder result
           224 : 0A4E;  -- 	LOAD   L2X
           225 : 8159;  -- 	CALL   Abs
           226 : 1250;  -- 	STORE  L2T1
           227 : 0A4F;  -- 	LOAD   L2Y
           228 : 8159;  -- 	CALL   Abs
           229 : 2250;  -- 	SUB    L2T1
           22A : 3246;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           22B : 1A50;  -- 	ADD    L2T1
           22C : 11E5;  -- 	STORE  m16sa
           22D : B8F6;  -- 	LOADI  246       ; max * 246
           22E : 11E6;  -- 	STORE  m16sB
           22F : 81C2;  -- 	CALL   Mult16s
           230 : 09EA;  -- 	LOAD   mres16sH
           231 : 6008;  -- 	SHIFT  8
           232 : 1251;  -- 	STORE  L2T2
           233 : 09E9;  -- 	LOAD   mres16sL
           234 : 6018;  -- 	SHIFT  -8        ; / 256
           235 : 4AA2;  -- 	AND    LowByte
           236 : 5251;  -- 	OR     L2T2
           237 : 1252;  -- 	STORE  L2T3
           238 : 0A50;  -- 	LOAD   L2T1
           239 : 11E5;  -- 	STORE  m16sa
           23A : B868;  -- 	LOADI  104       ; min * 104
           23B : 11E6;  -- 	STORE  m16sB
           23C : 81C2;  -- 	CALL   Mult16s
           23D : 09EA;  -- 	LOAD   mres16sH
           23E : 6008;  -- 	SHIFT  8
           23F : 1251;  -- 	STORE  L2T2
           240 : 09E9;  -- 	LOAD   mres16sL
           241 : 6018;  -- 	SHIFT  -8        ; / 256
           242 : 4AA2;  -- 	AND    LowByte
           243 : 5251;  -- 	OR     L2T2
           244 : 1A52;  -- 	ADD    L2T3     ; sum
           245 : 8800;  -- 	RETURN
           246 : 1A50;  -- 	ADD    L2T1
           247 : 1251;  -- 	STORE  L2T2
           248 : 0A50;  -- 	LOAD   L2T1
           249 : 1252;  -- 	STORE  L2T3
           24A : 0A51;  -- 	LOAD   L2T2
           24B : 1250;  -- 	STORE  L2T1
           24C : 0A52;  -- 	LOAD   L2T3
           24D : 2A2C;  -- 	JUMP   CalcDist
           24E : 0000;  -- L2X:  DW 0
           24F : 0000;  -- L2Y:  DW 0
           250 : 0000;  -- L2T1: DW 0
           251 : 0000;  -- L2T2: DW 0
           252 : 0000;  -- L2T3: DW 0
           253 : 9802;  -- 	OUT    TIMER
           254 : 9002;  -- 	IN     TIMER
           255 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           256 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           257 : 3254;  -- 	JNEG   Wloop
           258 : 8800;  -- 	RETURN
           259 : 8271;  -- 	CALL   GetBattLvl
           25A : 4259;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           25B : 22B1;  -- 	SUB    MinBatt
           25C : 325F;  -- 	JNEG   DeadBatt
           25D : 1AB1;  -- 	ADD    MinBatt     ; get original value back
           25E : 8800;  -- 	RETURN
           25F : B820;  -- 	LOADI  &H20
           260 : 980A;  -- 	OUT    BEEP        ; start beep sound
           261 : 8271;  -- 	CALL   GetBattLvl  ; get the battery level
           262 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           263 : 9805;  -- 	OUT    SSEG2
           264 : 9806;  -- 	OUT    LCD
           265 : 0A8F;  -- 	LOAD   Zero
           266 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           267 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           268 : 9807;  -- 	OUT    XLEDS
           269 : 8253;  -- 	CALL   Wait1       ; 1 second
           26A : 0A8F;  -- 	Load   Zero
           26B : 980A;  -- 	OUT    BEEP        ; stop beeping
           26C : 0A8F;  -- 	LOAD   Zero
           26D : 9801;  -- 	OUT    LEDS        ; LEDs off
           26E : 9807;  -- 	OUT    XLEDS
           26F : 8253;  -- 	CALL   Wait1       ; 1 second
           270 : 2A5F;  -- 	JUMP   DeadBatt    ; repeat forever
           271 : 0AB3;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           272 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           273 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           274 : 827F;  -- 	CALL   BlockI2C    ; wait for it to finish
           275 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           276 : 8800;  -- 	RETURN
           277 : 827F;  -- 	CALL   BlockI2C    ; wait for idle
           278 : 0AB2;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           279 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           27A : 0A8F;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           27B : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           27C : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           27D : 827F;  -- 	CALL   BlockI2C    ; wait for it to finish
           27E : 8800;  -- 	RETURN
           27F : 0A8F;  -- 	LOAD   Zero
           280 : 128D;  -- 	STORE  Temp        ; Used to check for timeout
           281 : 0A8D;  -- 	LOAD   Temp
           282 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           283 : 128D;  -- 	STORE  Temp
           284 : 4288;  -- 	JZERO  I2CError    ; Timeout occurred; error
           285 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           286 : 3A81;  -- 	JPOS   BI2CL       ; If not 0, try again
           287 : 8800;  -- 	RETURN             ; Else return
           288 : 0A8F;  -- 	LOAD   Zero
           289 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           28A : 9804;  -- 	OUT    SSEG1
           28B : 9805;  -- 	OUT    SSEG2       ; display error message
           28C : 2A88;  -- 	JUMP   I2CError
           28D : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           28E : FFFF;  -- NegOne:   DW -1
           28F : 0000;  -- Zero:     DW 0
           290 : 0001;  -- One:      DW 1
           291 : 0002;  -- Two:      DW 2
           292 : 0003;  -- Three:    DW 3
           293 : 0004;  -- Four:     DW 4
           294 : 0005;  -- Five:     DW 5
           295 : 0006;  -- Six:      DW 6
           296 : 0007;  -- Seven:    DW 7
           297 : 0008;  -- Eight:    DW 8
           298 : 0009;  -- Nine:     DW 9
           299 : 000A;  -- Ten:      DW 10
           29A : 0001;  -- Mask0:    DW &B00000001
           29B : 0002;  -- Mask1:    DW &B00000010
           29C : 0004;  -- Mask2:    DW &B00000100
           29D : 0008;  -- Mask3:    DW &B00001000
           29E : 0010;  -- Mask4:    DW &B00010000
           29F : 0020;  -- Mask5:    DW &B00100000
           2A0 : 0040;  -- Mask6:    DW &B01000000
           2A1 : 0080;  -- Mask7:    DW &B10000000
           2A2 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2A3 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2A4 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2A5 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2A6 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           2A7 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2A8 : 00B4;  -- Deg180:   DW 180       ; 180
           2A9 : 010E;  -- Deg270:   DW 270       ; 270
           2AA : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2AB : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2AC : FF9C;  -- RSlow:    DW -100
           2AD : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2AE : FEA2;  -- RMid:     DW -350
           2AF : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2B0 : FE0C;  -- RFast:    DW -500
           2B1 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2B2 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2B3 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           2B4 : 0096;  -- NINTY:			DW		150
           2B5 : 002C;  -- FOURTYFOUR:		DW		44
           2B6 : 000C;  -- TWELVE:			DW		12
           2B7 : 010E;  -- NEGNINTY:		DW		270
           2B8 : 013C;  -- NEGFOURTYFOUR:	DW		316
           2B9 : 015C;  -- NEGTWELVE:		DW		348
           2BA : 270F;  -- EEEE:			DW		9999
           2BB : AAAA;  -- AAAA:			DW		&HAAAA
           2BC : FFFF;  -- FFFF:			DW		&HFFFF
           2BD : 0092;  -- HALFFEET:		DW		146       
           2BE : 0167;  -- THREEFIVENINE:	DW		359
           350 : 270F;  -- CURRENTSENSOR:	DW		9999		; CURRENT SENSOR USED FOR CALCULATIONS
           351 : 0000;  -- CURRENTANGLE:	DW		0			; CURRENT ANGLE OF THE SENSOR
           352 : 0001;  -- LEFT:			DW		1			; 1 == LEFT; 0 = RIGHT
           353 : FFFF;  -- SENSOR0:		DW		&HFFFF
           354 : FFFF;  -- SENSOR2:		DW		&HFFFF
           355 : FFFF;  -- SENSOR3:		DW		&HFFFF
           356 : FFFF;  -- SENSOR5:		DW		&HFFFF
           357 : FFFF;  -- TEMPDIST:		DW		&HFFFF		; USED FOR CALCULATIONS
           358 : FFFF;  -- TEMPORARY:		DW		&HFFFF	
           359 : 0000;  -- CALCTHETA:		DW		0
           35A : 0000;  -- X:				DW		0			; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           35B : 0000;  -- Y:				DW		0			; Y POSITION OF ROBOT AFTER IT FOES UP THE MIDDLE 
           35C : 0000;  -- TEMPVAR:		DW		0			; DISTANCE FROM ROBOT TO CLOSEST OBJECT
           35D : 0000;  -- HOMEDIST:		DW		0			; DISTANCE FROM THE ROBOT TO HOMEBASE
           35E : 0000;  -- HOMEANGLE:		DW		0			; ANGLE FROM ROBOT TO HOMEBASE
           35F : 0000;  -- CALCX:			DW		0		
           360 : 0000;  -- CALCY:			DW		0
           361 : 0000;  -- TEMPTHETA:		DW		0			; THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           362 : 0000;  -- GOHOMEX:		DW		0			;X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           363 : 0000;  -- GOHOMEY:		DW		0			;Y POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           364 : 0000;  -- TEMPHOME:		DW		0
           365 : 0000;  -- FOUND:			DW		0			; IF SOMETHING IS FOUND, FOUND=1. ELSE, FOUND=0
  END;
