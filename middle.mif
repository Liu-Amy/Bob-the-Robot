-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2877;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 09D5;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 81BD;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 819F;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 49E4;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 49E1;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 49E1;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 11D3;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 51D3;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 49E2;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 09D5;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 98C3;  -- 	OUT		RESETPOS	
           022 : 09E0;  -- 	LOAD 	Mask0			; ENABLES SENSOR 0-5
           023 : 98B2;  --   	OUT 	SONAREN 
           024 : 2825;  --   	JUMP	GO4FEET
           025 : 09F3;  -- 	LOAD   	FMid        	; GO FORWARD
           026 : 9883;  -- 	OUT    	LVELCMD     
           027 : 988B;  -- 	OUT    	RVELCMD			  
           028 : 90C0;  -- 	IN		XPOS			; GET XPOS OF THE ROBOT
           029 : 21EC;  -- 	SUB		TwoFeet			; SUBTRACT 4 FEET
           02A : 21EC;  -- 	SUB		TwoFeet	
           02B : 3025;  -- 	JNEG	GO4FEET			; IF YOU HAVE NOT GONE 4 FEET, JUMP UP
           02C : 08C0;  -- 	LOAD	XPOS			; STORES THE X COORDINATE BEFORE RESET
           02D : 135D;  -- 	STORE	RESETX
           02E : 08C1;  -- 	LOAD	YPOS			; STORES THE Y COORDINATE BEFORE RESET
           02F : 135E;  -- 	STORE	RESETY
           030 : 98C3;  -- 	OUT		RESETPOS
           031 : 2832;  -- 	JUMP	ROTATE			; IF YOU HAVE GONE 4 FEET, START ROTATION
           032 : 09F3;  -- 	LOAD	FMid			; ROTATE 90 DEGREES TO THE LEFT
           033 : 988B;  -- 	OUT		RVELCMD
           034 : 90C2;  -- 	IN 		THETA 
           035 : 6FA6;  -- 	ADDI	-90
           036 : 3032;  -- 	JNEG	ROTATE
           037 : 2838;  -- 	JUMP	FORWARD
           038 : 09F3;  -- 	LOAD	FMid			; GO FORWARD
           039 : 9883;  -- 	OUT    	LVELCMD     
           03A : 988B;  -- 	OUT    	RVELCMD	
           03B : 283C;  -- 	JUMP	SEARCH0
           03C : 0FFF;  -- 	LOAD	&HFFFF
           03D : 1350;  -- 	STORE	CURRENTSENSOR
           03E : 90A8;  -- 	IN 		DIST0			; STORE THE VALUE OF DIST0 TO SENSOR0, IF THERE IS SOMETHING 4 FEET AWAY 
           03F : 135B;  -- 	STORE	TEMPDIST
           040 : 135C;  -- 	STORE	TEMPORARY
           041 : 21EC;  -- 	SUB		TWOFEET
           042 : 21EC;  -- 	SUB		TWOFEET
           043 : 3038;  -- 	JNEG	FORWARD			; IF THERE IS NOTHING 4 FEET AWAY, MORE FORWARD
           044 : 0B5B;  -- 	LOAD	TEMPDIST		; ELSE, STORE IN SENSOR0 AND BEEP
           045 : 1353;  -- 	STORE	SENSOR0
           046 : 2847;  -- 	JUMP	FINDSMALL
           047 : 0B52;  -- 	LOAD	LEFT			; IF ON THE RIGHT OF THE ROBOT, TURN RIGHT; LEFT=0 MEANS THAT IT IS ON THE RIGHT
           048 : 4062;  -- 	JZERO	ROTATERIGHT
           049 : 6FFF;  -- 	ADDI	-1				; IF ON THE LEFT OF THE ROBOT, TURN LEFT
           04A : 4068;  -- 	JZERO	ROTATELEFT		
           04B : 08C0;  -- 	LOAD	XPOS			; STORE THE CURRENT X POSITION OF THE ROBOT
           04C : 104F;  -- 	STORE	X
           04D : 08C1;  -- 	LOAD	YPOS			; STORE THE CURRENT Y POSITION OF THE ROBOT
           04E : 1050;  -- 	STORE	Y
           04F : 0000;  -- X:			DW		0	
           050 : 0000;  -- Y:			DW		0
           051 : 0000;  -- TEMPVAR:	DW		0
           052 : 09F3;  -- 	LOAD	FMid			; MOVE FORWARD
           053 : 9883;  -- 	OUT    	LVELCMD     
           054 : 988B;  -- 	OUT    	RVELCMD	
           055 : 0B50;  -- 	LOAD	CURRENTSENSOR	; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           056 : 1051;  -- 	STORE 	TEMPVAR
           057 : 08C0;  -- 	LOAD	XPOS			; L2X <- (XPOS-X) 
           058 : 204F;  -- 	SUB		X				
           059 : 1194;  -- 	STORE	L2X
           05A : 08C1;  -- 	LOAD	YPOS			; L2Y <- (YPOS-Y)
           05B : 2050;  -- 	SUB		Y
           05C : 1195;  -- 	STORE	L2Y
           05D : 816A;  -- 	CALL	L2Estimate		; L2Estimate = SQRT((XPOS-X)^2+(YPOS-Y)^2)
           05E : 2051;  -- 	SUB		TEMPVAR
           05F : 3052;  -- 	JNEG	TOWARDSOBJECT
           060 : 2861;  -- 	JUMP	NOISE
           061 : 980A;  -- 	OUT		BEEP	
           062 : 09F3;  -- 	LOAD	FMid
           063 : 9883;  -- 	OUT 	LVELCMD
           064 : 90C2;  -- 	IN 		THETA
           065 : 1B51;  -- 	ADD		CURRENTANGLE
           066 : 3862;  -- 	JPOS	ROTATERIGHT
           067 : 8800;  -- 	RETURN
           068 : 09F3;  -- 	LOAD	FMid			; ROTATE CORRECT DEGREES TO THE LEFT
           069 : 988B;  -- 	OUT		RVELCMD
           06A : 90C2;  -- 	IN 		THETA 
           06B : 2351;  -- 	SUB		CURRENTANGLE	
           06C : 3068;  -- 	JNEG	ROTATELEFT
           06D : 8800;  -- 	RETURN
           06E : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           06F : 09D5;  -- 	LOAD   Zero         ; Stop everything.
           070 : 9883;  -- 	OUT    LVELCMD
           071 : 988B;  -- 	OUT    RVELCMD
           072 : 98B2;  -- 	OUT    SONAREN
           073 : 0876;  -- 	LOAD   DEAD         ; An indication that we are dead
           074 : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           075 : 2875;  -- 	JUMP   Forever      ; Do this forever.
           076 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           077 : 807B;  -- 	CALL   ControlMovement
           078 : B000;  -- 	RETI   ; return from ISR
           079 : 0000;  -- DTheta:    DW 0
           07A : 0000;  -- DVel:      DW 0
           07B : 90C2;  -- 	IN     THETA
           07C : 2079;  -- 	SUB    DTheta      ; actual - desired angle
           07D : 80A0;  -- 	CALL   Neg         ; desired - actual angle
           07E : 68B4;  -- 	ADDI   180
           07F : 8099;  -- 	CALL   Mod360
           080 : 6F4C;  -- 	ADDI   -180
           081 : 6002;  -- 	SHIFT  2
           082 : 108D;  -- 	STORE  CMAErr      ; hold temporarily
           083 : 087A;  -- 	LOAD   DVel
           084 : 188D;  -- 	ADD    CMAErr
           085 : 808E;  -- 	CALL   CapVel      ; ensure velocity is valid
           086 : 988B;  -- 	OUT    RVELCMD
           087 : 088D;  -- 	LOAD   CMAErr
           088 : 80A0;  -- 	CALL   Neg         ; left wheel gets negative differential
           089 : 187A;  -- 	ADD    DVel
           08A : 808E;  -- 	CALL   CapVel
           08B : 9883;  -- 	OUT    LVELCMD
           08C : 8800;  -- 	RETURN
           08D : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           08E : 6E0C;  -- 	ADDI    -500
           08F : 3895;  -- 	JPOS    CapVelHigh
           090 : 69F4;  -- 	ADDI    500
           091 : 69F4;  -- 	ADDI    500
           092 : 3097;  -- 	JNEG    CapVelLow
           093 : 6E0C;  -- 	ADDI    -500
           094 : 8800;  -- 	RETURN
           095 : B9F4;  -- 	LOADI   500
           096 : 8800;  -- 	RETURN
           097 : BE0C;  -- 	LOADI   -500
           098 : 8800;  -- 	RETURN
           099 : 309C;  -- 	JNEG   M360N
           09A : 6E98;  -- 	ADDI   -360
           09B : 2899;  -- 	JUMP   Mod360
           09C : 6968;  -- 	ADDI   360
           09D : 309C;  -- 	JNEG   M360N
           09E : 8800;  -- 	RETURN
           09F : 38A2;  -- 	JPOS   Abs_r
           0A0 : 59D4;  -- 	XOR    NegOne       ; Flip all bits
           0A1 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0A2 : 8800;  -- 	RETURN
           0A3 : 0903;  -- 	LOAD   AtanY
           0A4 : 809F;  -- 	CALL   Abs          ; abs(y)
           0A5 : 1105;  -- 	STORE  AtanT
           0A6 : 0902;  -- 	LOAD   AtanX        ; abs(x)
           0A7 : 809F;  -- 	CALL   Abs
           0A8 : 2105;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0A9 : 30B4;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0AA : 0902;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0AB : 30B1;  -- 	JNEG   A2_R3
           0AC : 80C3;  -- 	CALL   A2_calc      ; Octants 1, 8
           0AD : 30AF;  -- 	JNEG   A2_R1n
           0AE : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0AF : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0B0 : 8800;  -- 	RETURN
           0B1 : 80C3;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0B2 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0B3 : 8800;  -- 	RETURN
           0B4 : 0903;  -- 	LOAD   AtanY        ; Swap input arguments
           0B5 : 1105;  -- 	STORE  AtanT
           0B6 : 0902;  -- 	LOAD   AtanX
           0B7 : 1103;  -- 	STORE  AtanY
           0B8 : 0905;  -- 	LOAD   AtanT
           0B9 : 1102;  -- 	STORE  AtanX
           0BA : 38BF;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0BB : 80C3;  -- 	CALL   A2_calc      ; else octants 6, 7
           0BC : 80A0;  -- 	CALL   Neg          ; Negatge the number
           0BD : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0BE : 8800;  -- 	RETURN
           0BF : 80C3;  -- 	CALL   A2_calc      ; Octants 2, 3
           0C0 : 80A0;  -- 	CALL   Neg          ; negate the angle
           0C1 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0C2 : 8800;  -- 	RETURN
           0C3 : 0903;  -- 	LOAD   AtanY
           0C4 : 1162;  -- 	STORE  d16sN        ; Y in numerator
           0C5 : 0902;  -- 	LOAD   AtanX
           0C6 : 1163;  -- 	STORE  d16sD        ; X in denominator
           0C7 : 80EF;  -- 	CALL   A2_div       ; divide
           0C8 : 0968;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0C9 : 1104;  -- 	STORE  AtanRatio
           0CA : 112B;  -- 	STORE  m16sA
           0CB : 112C;  -- 	STORE  m16sB
           0CC : 80E6;  -- 	CALL   A2_mult      ; X^2
           0CD : 112B;  -- 	STORE  m16sA
           0CE : 0906;  -- 	LOAD   A2c
           0CF : 112C;  -- 	STORE  m16sB
           0D0 : 80E6;  -- 	CALL   A2_mult
           0D1 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           0D2 : 1163;  -- 	STORE  d16sD
           0D3 : 0904;  -- 	LOAD   AtanRatio
           0D4 : 1162;  -- 	STORE  d16sN        ; Ratio in numerator
           0D5 : 80EF;  -- 	CALL   A2_div       ; divide
           0D6 : 0968;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0D7 : 112B;  -- 	STORE  m16sA        ; <= result in radians
           0D8 : 0907;  -- 	LOAD   A2cd         ; degree conversion factor
           0D9 : 112C;  -- 	STORE  m16sB
           0DA : 80E6;  -- 	CALL   A2_mult      ; convert to degrees
           0DB : 1105;  -- 	STORE  AtanT
           0DC : 6017;  -- 	SHIFT  -7           ; check 7th bit
           0DD : 49D6;  -- 	AND    One
           0DE : 40E3;  -- 	JZERO  A2_rdwn      ; round down
           0DF : 0905;  -- 	LOAD   AtanT
           0E0 : 6018;  -- 	SHIFT  -8
           0E1 : 6801;  -- 	ADDI   1            ; round up
           0E2 : 8800;  -- 	RETURN
           0E3 : 0905;  -- 	LOAD   AtanT
           0E4 : 6018;  -- 	SHIFT  -8           ; round down
           0E5 : 8800;  -- 	RETURN
           0E6 : 8108;  -- 	CALL   Mult16s
           0E7 : 0930;  -- 	LOAD   mres16sH
           0E8 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0E9 : 1130;  -- 	STORE  mres16sH
           0EA : 092F;  -- 	LOAD   mres16sL
           0EB : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           0EC : 49E8;  -- 	AND    LowByte
           0ED : 5130;  -- 	OR     mres16sH     ; combine high and low words of result
           0EE : 8800;  -- 	RETURN
           0EF : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           0F0 : 1105;  -- 	STORE  AtanT
           0F1 : 0905;  -- 	LOAD   AtanT
           0F2 : 6FFF;  -- 	ADDI   -1
           0F3 : 38F6;  -- 	JPOS   A2_DN        ; not done; continue shifting
           0F4 : 8131;  -- 	CALL   Div16s       ; do the standard division
           0F5 : 8800;  -- 	RETURN
           0F6 : 1105;  -- 	STORE  AtanT
           0F7 : 0962;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           0F8 : 6001;  -- 	SHIFT  1
           0F9 : 5962;  -- 	XOR    d16sN        ; if the sign changed,
           0FA : 30FE;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           0FB : 5962;  -- 	XOR    d16sN        ; get back shifted version
           0FC : 1162;  -- 	STORE  d16sN
           0FD : 28F1;  -- 	JUMP   A2_DL
           0FE : 0963;  -- 	LOAD   d16sD
           0FF : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           100 : 1163;  -- 	STORE  d16sD
           101 : 28F1;  -- 	JUMP   A2_DL
           102 : 0000;  -- AtanX:      DW 0
           103 : 0000;  -- AtanY:      DW 0
           104 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           105 : 0000;  -- AtanT:      DW 0        ; temporary value
           106 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           107 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           108 : B800;  -- 	LOADI  0
           109 : 112D;  -- 	STORE  m16sc        ; clear carry
           10A : 1130;  -- 	STORE  mres16sH     ; clear result
           10B : B810;  -- 	LOADI  16           ; load 16 to counter
           10C : 112E;  -- 	STORE  mcnt16s      
           10D : 092D;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           10E : 4112;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           10F : 0930;  -- 	LOAD   mres16sH     ; if a carry, 
           110 : 192B;  -- 	ADD    m16sA        ;  add multiplicand to result H
           111 : 1130;  -- 	STORE  mres16sH
           112 : 092C;  -- 	LOAD   m16sB
           113 : 49D6;  -- 	AND    One          ; check bit 0 of multiplier
           114 : 112D;  -- 	STORE  m16sc        ; save as next carry
           115 : 4119;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           116 : 0930;  -- 	LOAD   mres16sH     ; if bit 0 set,
           117 : 212B;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           118 : 1130;  -- 	STORE  mres16sH
           119 : 092C;  -- 	LOAD   m16sB
           11A : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           11B : 492A;  -- 	AND    c7FFF        ; clear msb
           11C : 112C;  -- 	STORE  m16sB
           11D : 0930;  -- 	LOAD   mres16sH     ; load result H
           11E : 600F;  -- 	SHIFT  15           ; move lsb to msb
           11F : 512C;  -- 	OR     m16sB
           120 : 112C;  -- 	STORE  m16sB        ; result L now includes carry out from H
           121 : 0930;  -- 	LOAD   mres16sH
           122 : 6011;  -- 	SHIFT  -1
           123 : 1130;  -- 	STORE  mres16sH     ; shift result H >>1
           124 : 092E;  -- 	LOAD   mcnt16s
           125 : 6FFF;  -- 	ADDI   -1           ; check counter
           126 : 390C;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           127 : 092C;  -- 	LOAD   m16sB
           128 : 112F;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           129 : 8800;  -- 	RETURN              ; Done
           12A : 7FFF;  -- c7FFF: DW &H7FFF
           12B : 0000;  -- m16sA: DW 0 ; multiplicand
           12C : 0000;  -- m16sB: DW 0 ; multipler
           12D : 0000;  -- m16sc: DW 0 ; carry
           12E : 0000;  -- mcnt16s: DW 0 ; counter
           12F : 0000;  -- mres16sL: DW 0 ; result low
           130 : 0000;  -- mres16sH: DW 0 ; result high
           131 : B800;  -- 	LOADI  0
           132 : 1169;  -- 	STORE  dres16sR     ; clear remainder result
           133 : 1166;  -- 	STORE  d16sC1       ; clear carry
           134 : 0962;  -- 	LOAD   d16sN
           135 : 5963;  -- 	XOR    d16sD
           136 : 1164;  -- 	STORE  d16sS        ; sign determination = N XOR D
           137 : B811;  -- 	LOADI  17
           138 : 1165;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           139 : 0963;  -- 	LOAD   d16sD
           13A : 809F;  -- 	CALL   Abs          ; take absolute value of denominator
           13B : 1163;  -- 	STORE  d16sD
           13C : 0962;  -- 	LOAD   d16sN
           13D : 809F;  -- 	CALL   Abs          ; take absolute value of numerator
           13E : 1162;  -- 	STORE  d16sN
           13F : 0962;  -- 	LOAD   d16sN
           140 : 601F;  -- 	SHIFT  -15          ; get msb
           141 : 49D6;  -- 	AND    One          ; only msb (because shift is arithmetic)
           142 : 1167;  -- 	STORE  d16sC2       ; store as carry
           143 : 0962;  -- 	LOAD   d16sN
           144 : 6001;  -- 	SHIFT  1            ; shift <<1
           145 : 5166;  -- 	OR     d16sC1       ; with carry
           146 : 1162;  -- 	STORE  d16sN
           147 : 0965;  -- 	LOAD   d16sT
           148 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           149 : 4159;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           14A : 1165;  -- 	STORE  d16sT
           14B : 0969;  -- 	LOAD   dres16sR
           14C : 6001;  -- 	SHIFT  1            ; shift remainder
           14D : 5167;  -- 	OR     d16sC2       ; with carry from other shift
           14E : 2163;  -- 	SUB    d16sD        ; subtract denominator from remainder
           14F : 3154;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           150 : 1169;  -- 	STORE  dres16sR
           151 : B801;  -- 	LOADI  1
           152 : 1166;  -- 	STORE  d16sC1       ; set carry
           153 : 293F;  -- 	JUMP   Div16s_loop
           154 : 1963;  -- 	ADD    d16sD        ; add denominator back in
           155 : 1169;  -- 	STORE  dres16sR
           156 : B800;  -- 	LOADI  0
           157 : 1166;  -- 	STORE  d16sC1       ; clear carry
           158 : 293F;  -- 	JUMP   Div16s_loop
           159 : 0962;  -- 	LOAD   d16sN
           15A : 1168;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           15B : 0964;  -- 	LOAD   d16sS        ; check the sign indicator
           15C : 315E;  -- 	JNEG   Div16s_neg
           15D : 8800;  -- 	RETURN
           15E : 0968;  -- 	LOAD   dres16sQ     ; need to negate the result
           15F : 80A0;  -- 	CALL   Neg
           160 : 1168;  -- 	STORE  dres16sQ
           161 : 8800;  -- 	RETURN	
           162 : 0000;  -- d16sN: DW 0 ; numerator
           163 : 0000;  -- d16sD: DW 0 ; denominator
           164 : 0000;  -- d16sS: DW 0 ; sign value
           165 : 0000;  -- d16sT: DW 0 ; temp counter
           166 : 0000;  -- d16sC1: DW 0 ; carry value
           167 : 0000;  -- d16sC2: DW 0 ; carry value
           168 : 0000;  -- dres16sQ: DW 0 ; quotient result
           169 : 0000;  -- dres16sR: DW 0 ; remainder result
           16A : 0994;  -- 	LOAD   L2X
           16B : 809F;  -- 	CALL   Abs
           16C : 1196;  -- 	STORE  L2T1
           16D : 0995;  -- 	LOAD   L2Y
           16E : 809F;  -- 	CALL   Abs
           16F : 2196;  -- 	SUB    L2T1
           170 : 318C;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           171 : 1996;  -- 	ADD    L2T1
           172 : 112B;  -- 	STORE  m16sa
           173 : B8F6;  -- 	LOADI  246       ; max * 246
           174 : 112C;  -- 	STORE  m16sB
           175 : 8108;  -- 	CALL   Mult16s
           176 : 0930;  -- 	LOAD   mres16sH
           177 : 6008;  -- 	SHIFT  8
           178 : 1197;  -- 	STORE  L2T2
           179 : 092F;  -- 	LOAD   mres16sL
           17A : 6018;  -- 	SHIFT  -8        ; / 256
           17B : 49E8;  -- 	AND    LowByte
           17C : 5197;  -- 	OR     L2T2
           17D : 1198;  -- 	STORE  L2T3
           17E : 0996;  -- 	LOAD   L2T1
           17F : 112B;  -- 	STORE  m16sa
           180 : B868;  -- 	LOADI  104       ; min * 104
           181 : 112C;  -- 	STORE  m16sB
           182 : 8108;  -- 	CALL   Mult16s
           183 : 0930;  -- 	LOAD   mres16sH
           184 : 6008;  -- 	SHIFT  8
           185 : 1197;  -- 	STORE  L2T2
           186 : 092F;  -- 	LOAD   mres16sL
           187 : 6018;  -- 	SHIFT  -8        ; / 256
           188 : 49E8;  -- 	AND    LowByte
           189 : 5197;  -- 	OR     L2T2
           18A : 1998;  -- 	ADD    L2T3     ; sum
           18B : 8800;  -- 	RETURN
           18C : 1996;  -- 	ADD    L2T1
           18D : 1197;  -- 	STORE  L2T2
           18E : 0996;  -- 	LOAD   L2T1
           18F : 1198;  -- 	STORE  L2T3
           190 : 0997;  -- 	LOAD   L2T2
           191 : 1196;  -- 	STORE  L2T1
           192 : 0998;  -- 	LOAD   L2T3
           193 : 2972;  -- 	JUMP   CalcDist
           194 : 0000;  -- L2X:  DW 0
           195 : 0000;  -- L2Y:  DW 0
           196 : 0000;  -- L2T1: DW 0
           197 : 0000;  -- L2T2: DW 0
           198 : 0000;  -- L2T3: DW 0
           199 : 9802;  -- 	OUT    TIMER
           19A : 9002;  -- 	IN     TIMER
           19B : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           19C : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           19D : 319A;  -- 	JNEG   Wloop
           19E : 8800;  -- 	RETURN
           19F : 81B7;  -- 	CALL   GetBattLvl
           1A0 : 419F;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1A1 : 21F7;  -- 	SUB    MinBatt
           1A2 : 31A5;  -- 	JNEG   DeadBatt
           1A3 : 19F7;  -- 	ADD    MinBatt     ; get original value back
           1A4 : 8800;  -- 	RETURN
           1A5 : B820;  -- 	LOADI  &H20
           1A6 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1A7 : 81B7;  -- 	CALL   GetBattLvl  ; get the battery level
           1A8 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1A9 : 9805;  -- 	OUT    SSEG2
           1AA : 9806;  -- 	OUT    LCD
           1AB : 09D5;  -- 	LOAD   Zero
           1AC : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1AD : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1AE : 9807;  -- 	OUT    XLEDS
           1AF : 8199;  -- 	CALL   Wait1       ; 1 second
           1B0 : 09D5;  -- 	Load   Zero
           1B1 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1B2 : 09D5;  -- 	LOAD   Zero
           1B3 : 9801;  -- 	OUT    LEDS        ; LEDs off
           1B4 : 9807;  -- 	OUT    XLEDS
           1B5 : 8199;  -- 	CALL   Wait1       ; 1 second
           1B6 : 29A5;  -- 	JUMP   DeadBatt    ; repeat forever
           1B7 : 09F9;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1B8 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1B9 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1BA : 81C5;  -- 	CALL   BlockI2C    ; wait for it to finish
           1BB : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1BC : 8800;  -- 	RETURN
           1BD : 81C5;  -- 	CALL   BlockI2C    ; wait for idle
           1BE : 09F8;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1BF : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1C0 : 09D5;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1C1 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1C2 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1C3 : 81C5;  -- 	CALL   BlockI2C    ; wait for it to finish
           1C4 : 8800;  -- 	RETURN
           1C5 : 09D5;  -- 	LOAD   Zero
           1C6 : 11D3;  -- 	STORE  Temp        ; Used to check for timeout
           1C7 : 09D3;  -- 	LOAD   Temp
           1C8 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1C9 : 11D3;  -- 	STORE  Temp
           1CA : 41CE;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1CB : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1CC : 39C7;  -- 	JPOS   BI2CL       ; If not 0, try again
           1CD : 8800;  -- 	RETURN             ; Else return
           1CE : 09D5;  -- 	LOAD   Zero
           1CF : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1D0 : 9804;  -- 	OUT    SSEG1
           1D1 : 9805;  -- 	OUT    SSEG2       ; display error message
           1D2 : 29CE;  -- 	JUMP   I2CError
           1D3 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           1D4 : FFFF;  -- NegOne:   DW -1
           1D5 : 0000;  -- Zero:     DW 0
           1D6 : 0001;  -- One:      DW 1
           1D7 : 0002;  -- Two:      DW 2
           1D8 : 0003;  -- Three:    DW 3
           1D9 : 0004;  -- Four:     DW 4
           1DA : 0005;  -- Five:     DW 5
           1DB : 0006;  -- Six:      DW 6
           1DC : 0007;  -- Seven:    DW 7
           1DD : 0008;  -- Eight:    DW 8
           1DE : 0009;  -- Nine:     DW 9
           1DF : 000A;  -- Ten:      DW 10
           1E0 : 0001;  -- Mask0:    DW &B00000001
           1E1 : 0002;  -- Mask1:    DW &B00000010
           1E2 : 0004;  -- Mask2:    DW &B00000100
           1E3 : 0008;  -- Mask3:    DW &B00001000
           1E4 : 0010;  -- Mask4:    DW &B00010000
           1E5 : 0020;  -- Mask5:    DW &B00100000
           1E6 : 0040;  -- Mask6:    DW &B01000000
           1E7 : 0080;  -- Mask7:    DW &B10000000
           1E8 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1E9 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1EA : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1EB : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1EC : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1ED : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1EE : 00B4;  -- Deg180:   DW 180       ; 180
           1EF : 010E;  -- Deg270:   DW 270       ; 270
           1F0 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1F1 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1F2 : FF9C;  -- RSlow:    DW -100
           1F3 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1F4 : FEA2;  -- RMid:     DW -350
           1F5 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1F6 : FE0C;  -- RFast:    DW -500
           1F7 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1F8 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1F9 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           1FA : 005A;  -- NINTY:			DW		90
           1FB : 002C;  -- FOURTYFOUR:		DW		44
           1FC : 000C;  -- TWELVE:			DW		12
           1FD : FFA6;  -- NEGNINTY:		DW		-90
           1FE : FFD4;  -- NEGFOURTYFOUR:	DW		-44
           1FF : FFF4;  -- NEGTWELVE:		DW		-12
           350 : FFFF;  -- CURRENTSENSOR:	DW		&HFFFF		; CURRENT SENSOR USED FOR CALCULATIONS
           351 : FFFF;  -- CURRENTANGLE:	DW		&HFFFF		; CURRENT ANGLE OF THE SENSOR
           352 : 0001;  -- LEFT:			DW		1			; 1 == LEFT; 0 = RIGHT
           353 : FFFF;  -- SENSOR0:		DW		&HFFFF
           354 : FFFF;  -- SENSOR1:		DW		&HFFFF
           355 : FFFF;  -- SENSOR2:		DW		&HFFFF
           356 : FFFF;  -- SENSOR3:		DW		&HFFFF
           357 : FFFF;  -- SENSOR4:		DW		&HFFFF
           358 : FFFF;  -- SENSOR5:		DW		&HFFFF
           359 : FFFF;  -- SENSOR6:		DW		&HFFFF
           35A : FFFF;  -- SENSOR7:		DW		&HFFFF
           35B : FFFF;  -- TEMPDIST:		DW		&HFFFF		; USED FOR CALCULATIONS
           35C : FFFF;  -- TEMPORARY:		DW		&HFFFF	
           35D : 0000;  -- RESETX:			DW		0			; SAVES X BEFORE RESET
           35E : 0000;  -- RESETY:			DW		0			; SAVES Y BEFORE RESET
  END;
