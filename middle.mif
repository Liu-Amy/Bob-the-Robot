-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0B20;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 8308;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 82EA;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4B2F;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4B2C;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4B2C;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 131E;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 531E;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4B2D;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0B20;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT		RESETPOS			; RESTORE VARIABLES 
           01D : 0B4B;  -- 	LOAD 	EEEE
           01E : 1450;  -- 	STORE	CURRENTSENSOR						
           01F : 0B21;  -- 	LOAD	One
           020 : 1452;  -- 	STORE	LEFT
           021 : 0B4D;  -- 	LOAD	FFFF
           022 : 1454;  -- 	STORE	SENSOR0
           023 : 1455;  -- 	STORE	SENSOR1
           024 : 1456;  -- 	STORE	SENSOR2
           025 : 1457;  -- 	STORE	SENSOR3
           026 : 1458;  -- 	STORE	SENSOR4
           027 : 1459;  -- 	STORE	SENSOR5
           028 : 145A;  -- 	STORE 	TEMPDIST
           029 : 145B;  -- 	STORE	TEMPORARY 
           02A : 0B20;  -- 	LOAD	Zero
           02B : 1451;  -- 	STORE	CURRENTANGLE	
           02C : 145D;  -- 	STORE	X
           02D : 145E;  -- 	STORE	Y
           02E : 145F;  -- 	STORE	TEMPVAR
           02F : 1460;  -- 	STORE	HOMEDIST
           030 : 1461;  -- 	STORE	HOMEANGLE
           031 : 1462;  -- 	STORE	CALCX
           032 : 1463;  -- 	STORE	CALCY
           033 : 1464;  -- 	STORE	TEMPTHETA
           034 : 1465;  -- 	STORE	GOHOMEX
           035 : 1466;  -- 	STORE	GOHOMEY
           036 : 1467;  -- 	STORE	TEMPHOME
           037 : 145C;  -- 	STORE	CALCTHETA
           038 : 1469;  -- 	STORE	TEMPX
           039 : 146A;  -- 	STORE	TEMPY
           03A : 146D;  -- 	STORE	CORRECTANGLE
           03B : 1468;  -- 	STORE	FOUND
           03C : 146E;  -- 	STORE	UPANGLE
           03D : 1453;  -- 	STORE	UP
           03E : 146B;  -- 	STORE	XLOCATION
           03F : 146C;  -- 	STORE	YLOCATION
           040 : 1183;  -- 	STORE	ADJUSTHOMEX
           041 : 1184;  -- 	STORE	ADJUSTHOMEY
           042 : 1163;  -- 	STORE 	GOHOMEVAR
           043 : 0B2B;  -- 	LOAD 	Mask0				; ENABLES SENSOR 0, 2, 3, 5
           044 : 532D;  --  	OR 		Mask2
           045 : 532E;  --  	OR		Mask3
           046 : 5330;  -- 	OR		Mask5	
           047 : 98B2;  --   	OUT 	SONAREN 
           048 : 2849;  --   	JUMP	GO4FEET
           049 : 0B3E;  -- 	LOAD   	FMid        		; GO FORWARD
           04A : 9883;  -- 	OUT    	LVELCMD     
           04B : 988B;  -- 	OUT    	RVELCMD	
           04C : 90C0;  -- 	IN		XPOS				; GET XPOS OF THE ROBOT
           04D : 2337;  -- 	SUB		TwoFeet				; SUBTRACT 4 FEET
           04E : 3049;  -- 	JNEG	GO4FEET				; IF YOU HAVE NOT GONE 4 FEET, JUMP UP
           04F : 2850;  -- 	JUMP	ROTATE				; IF YOU HAVE GONE 4 FEET, START ROTATION		
           050 : 0B3E;  -- 	LOAD	FMid				; START CALCULATION FOR ROTATING 90 DEGREES TO THE LEFT
           051 : 988B;  -- 	OUT		RVELCMD
           052 : 90C2;  -- 	IN 		THETA 
           053 : 145C;  -- 	STORE	CALCTHETA
           054 : 6F4C;  -- 	ADDI	-180
           055 : 3857;  -- 	JPOS	ADJUST				; ROBOT ROTATED SLIGHTLY TO THE RIGHT. NEED TO ADJUST THETA
           056 : 285B;  -- 	JUMP	ROTATE2				; DO NOT NEED TO ADJUST THETA. ROTATE
           057 : 0C5C;  -- 	LOAD	CALCTHETA
           058 : 6E99;  -- 	ADDI	-359
           059 : 145C;  -- 	STORE	CALCTHETA
           05A : 285B;  -- 	JUMP	ROTATE2			
           05B : 0C5C;  -- 	LOAD	CALCTHETA			 
           05C : 6FC4;  -- 	ADDI	-60
           05D : 3050;  -- 	JNEG	ROTATE				; IF YOU HAVE NOT ROTATE ENOUGH, ROTATE AGAIN
           05E : 285F;  -- 	JUMP	FORWARD				; IF YOU HAVE ROTATED 90 DEGREES, GO FORWARD
           05F : 0B3E;  -- 	LOAD	FMid				
           060 : 9883;  -- 	OUT    	LVELCMD     		
           061 : 988B;  -- 	OUT    	RVELCMD	
           062 : 2863;  -- 	JUMP	SEARCH0				
           063 : 0B4B;  -- 	LOAD	EEEE				; THIS IS THE "CLOSEST" OBJECT
           064 : 1450;  -- 	STORE	CURRENTSENSOR
           065 : 90A8;  -- 	IN 		DIST0				; STORE THE VALUE OF DIST0 TO SENSOR0, IF THERE IS SOMETHING 4 FEET AWAY 
           066 : 145A;  -- 	STORE	TEMPDIST
           067 : 145B;  -- 	STORE	TEMPORARY
           068 : 0C5B;  -- 	LOAD	TEMPORARY
           069 : 2337;  -- 	SUB		TWOFEET
           06A : 2337;  -- 	SUB		TWOFEET		
           06B : 387D;  --  	JPOS	SEARCH2				; IF THERE IS NOTHING 4 FEET AWAY, MORE FORWARD
           06C : 306D;  -- 	JNEG	FOUND0				; THERE IS SOMETHING CLOSE BY, STORE IT TO SENSOR0
           06D : 0B21;  -- 	LOAD	One
           06E : 1468;  -- 	STORE	FOUND
           06F : 0C5A;  -- 	LOAD	TEMPDIST			
           070 : 1454;  -- 	STORE	SENSOR0
           071 : 2872;  -- 	JUMP 	FINDSMALL0		
           072 : 0C50;  -- 	LOAD	CURRENTSENSOR		; IS SONAR0 THE CLOSEST OBJECT?
           073 : 2454;  -- 	SUB		SENSOR0
           074 : 3876;  -- 	JPOS	CHOSE0				; IF SENSOR0 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR0 AS THE CLOSEST
           075 : 307D;  --  	JNEG	SEARCH2				; ELSE, DETECT OBJECTS IN SENSOR2
           076 : 0C54;  -- 	LOAD	SENSOR0
           077 : 1450;  -- 	STORE	CURRENTSENSOR		; CURRENTSENSOR <= SENSOR0 VALUE
           078 : 0B45;  -- 	LOAD	NINTY
           079 : 1451;  -- 	STORE	CURRENTANGLE		; CURRENTANGLE <= 90
           07A : 0B21;  -- 	LOAD	One
           07B : 1452;  -- 	STORE	LEFT				; LEFT <= 0
           07C : 287D;  --  	JUMP	SEARCH2
           07D : 90AA;  -- 	IN 		DIST2				; DETECT FOR OBJECTS WITH SENSOR2
           07E : 145A;  -- 	STORE	TEMPDIST
           07F : 145B;  -- 	STORE	TEMPORARY
           080 : 0C5B;  -- 	LOAD	TEMPORARY
           081 : 2337;  -- 	SUB		TwoFeet				; 
           082 : 3895;  -- 	JPOS	SEARCH3				; IF MORE THAN 2 FEET AWAY, DO NOT STORE AND MOVE ON TO SEARCH FOR OBJECTS WITH SENSOR3
           083 : 3084;  -- 	JNEG	FOUND2				; IF LESS THAN 2 FEET AWAY
           084 : 0B21;  -- 	LOAD	One					; ROBOT DETECTS SOMETHING WITH SENSOR2, STORE DISTANCE IN SENSOR2
           085 : 1468;  -- 	STORE	FOUND
           086 : 0C5A;  -- 	LOAD	TEMPDIST			
           087 : 1456;  -- 	STORE	SENSOR2
           088 : 2889;  -- 	JUMP 	FINDSMALL2
           089 : 0C50;  -- 	LOAD	CURRENTSENSOR		; IS SENSOR2 CLOSER THAN THE CURRENT SMALLEST?
           08A : 2456;  -- 	SUB		SENSOR2
           08B : 388D;  -- 	JPOS	CHOSE2				; OBJECT DETECTED WITH SENSOR2 IS THE SMALLEST CURRENTLY
           08C : 3095;  -- 	JNEG	SEARCH3				; OBJECT IS NOT THE SMALLEST
           08D : 0C56;  -- 	LOAD	SENSOR2				; CURRENTSENSOR <= SENSOR2
           08E : 1450;  -- 	STORE	CURRENTSENSOR
           08F : 0B20;  -- 	LOAD	Zero				; CURRENTANGLE <= 0
           090 : 1451;  -- 	STORE	CURRENTANGLE
           091 : 0B21;  -- 	LOAD	One					; UP <= 1
           092 : 1453;  -- 	STORE	UP
           093 : 1452;  -- 	STORE	LEFT				; LEFT <= 1
           094 : 2895;  -- 	JUMP	SEARCH3				; LOOK FOR THIS WITH SENSOR3
           095 : 90AB;  -- 	IN 		DIST3				
           096 : 145A;  -- 	STORE	TEMPDIST
           097 : 145B;  -- 	STORE	TEMPORARY
           098 : 0C5B;  -- 	LOAD	TEMPORARY
           099 : 2337;  -- 	SUB		TwoFeet				
           09A : 38AD;  -- 	JPOS	SEARCH5				; IF MORE THAN 2 FEET AWAY, DO NOT STORE AND MOVE ON TO LOOK FOR THINGS WITH SENSOR 5
           09B : 309C;  -- 	JNEG	FOUND3				; DETECTED OBJECT IS CLOSER THAN 2 FEET
           09C : 0B21;  -- 	LOAD	One
           09D : 1468;  -- 	STORE	FOUND
           09E : 0C5A;  -- 	LOAD	TEMPDIST			
           09F : 1457;  -- 	STORE	SENSOR3
           0A0 : 28A1;  -- 	JUMP 	FINDSMALL3
           0A1 : 0C50;  -- 	LOAD	CURRENTSENSOR		
           0A2 : 2457;  -- 	SUB		SENSOR3
           0A3 : 38A5;  -- 	JPOS	CHOSE3				; OBJECT DETECTED WITH SENSOR3 IS THE SMALLEST CURRENTLY
           0A4 : 30AD;  -- 	JNEG	SEARCH5				; OBJECT IS NOT THE SMALLEST
           0A5 : 0C57;  -- 	LOAD	SENSOR3				; CURRENTSENOR <= SENSOR3
           0A6 : 1450;  -- 	STORE	CURRENTSENSOR
           0A7 : 0B20;  -- 	LOAD	Zero				; CURRENTANGLE <= 2
           0A8 : 1451;  -- 	STORE	CURRENTANGLE	
           0A9 : 0B21;  -- 	LOAD 	One					; UP <= 1
           0AA : 1453;  -- 	STORE	UP
           0AB : 1452;  -- 	STORE	LEFT				; LEFT <= 1
           0AC : 28AD;  -- 	JUMP	SEARCH5	
           0AD : 90AD;  -- 	IN 		DIST5				
           0AE : 145A;  -- 	STORE	TEMPDIST
           0AF : 145B;  -- 	STORE	TEMPORARY
           0B0 : 0C5B;  -- 	LOAD	TEMPORARY
           0B1 : 2337;  -- 	SUB		TWOFEET
           0B2 : 2337;  -- 	SUB		TWOFEET		
           0B3 : 30B7;  -- 	JNEG	FOUND5				; FOUND SOMETHING IN SENSOR5 LESS THAN 4 FEET AWAY WITH SENSOR5
           0B4 : 0C68;  -- 	LOAD	FOUND				; DID NOT FIND ANYTHING IN SENSOR5, BUT THERE WAS SOMETHING FOUND PREVIOUSLY? 
           0B5 : 405F;  -- 	JZERO	FORWARD				; IF NO, MOVE FORWARD
           0B6 : 38C7;  -- 	JPOS	ROTATETOWARDSOBJECT	; IF YES, ROTATE TOWARDS THE CLOSEST OBJECT
           0B7 : 0B21;  -- 	LOAD	One
           0B8 : 1468;  -- 	STORE	FOUND
           0B9 : 0C5A;  -- 	LOAD	TEMPDIST			
           0BA : 1459;  -- 	STORE	SENSOR5
           0BB : 28BC;  -- 	JUMP 	FINDSMALL5
           0BC : 0C50;  -- 	LOAD	CURRENTSENSOR 		; IS SENSOR5 CLOSER THAN THE CURRENT SMALLEST?
           0BD : 2459;  -- 	SUB		SENSOR5
           0BE : 38C0;  -- 	JPOS	CHOSE5				; IF SENSOR5 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR5 AS THE CLOSEST
           0BF : 30C7;  -- 	JNEG	ROTATETOWARDSOBJECT	; ELSE, ROTATE TOWARDS THE CLOSEST OBJECT.
           0C0 : 0C59;  -- 	LOAD	SENSOR5				; CURRENTSENSOR <= SENSOR5
           0C1 : 1450;  -- 	STORE	CURRENTSENSOR
           0C2 : 0B48;  -- 	LOAD	NEGNINTY			; CURRENTANFLE <= -90
           0C3 : 1451;  -- 	STORE	CURRENTANGLE
           0C4 : 0B20;  -- 	LOAD	Zero				; LEFT <= 0
           0C5 : 1452;  -- 	STORE	LEFT
           0C6 : 28C7;  -- 	JUMP	ROTATETOWARDSOBJECT
           0C7 : 0C52;  -- 	LOAD	LEFT				; IF ON THE RIGHT OF THE ROBOT, TURN RIGHT; LEFT=0 MEANS THAT IT IS ON THE RIGHT
           0C8 : 40CB;  -- 	JZERO	ROTATERIGHT
           0C9 : 6FFF;  -- 	ADDI	-1					; IF ON THE LEFT OF THE ROBOT, TURN LEFT
           0CA : 40D1;  -- 	JZERO	ROTATELEFT	
           0CB : 0B3E;  -- 	LOAD	FMid				
           0CC : 9883;  -- 	OUT 	LVELCMD	
           0CD : 90C2;  -- 	IN 		THETA
           0CE : 2451;  -- 	SUB		CURRENTANGLE
           0CF : 30CB;  -- 	JNEG	ROTATERIGHT
           0D0 : 28D7;  -- 	JUMP	MOVESETUP
           0D1 : 0B3E;  -- 	LOAD	FMid			
           0D2 : 988B;  -- 	OUT		RVELCMD
           0D3 : 90C2;  -- 	IN 		THETA 
           0D4 : 2451;  -- 	SUB		CURRENTANGLE	
           0D5 : 30D1;  -- 	JNEG	ROTATELEFT
           0D6 : 28D7;  -- 	JUMP	MOVESETUP	
           0D7 : 90C0;  -- 	IN		XPOS				; STORE THE CURRENT X POSITION OF THE ROBOT
           0D8 : 145D;  -- 	STORE	X
           0D9 : 90C1;  -- 	IN		YPOS				; STORE THE CURRENT Y POSITION OF THE ROBOT
           0DA : 145E;  -- 	STORE	Y
           0DB : 28DC;  -- 	JUMP 	MOVETOWARDSOBJECT
           0DC : 0B3E;  -- 	LOAD	FMid				
           0DD : 9883;  -- 	OUT    	LVELCMD     
           0DE : 988B;  -- 	OUT    	RVELCMD	
           0DF : 0C50;  -- 	LOAD	CURRENTSENSOR		; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           0E0 : 145F;  -- 	STORE 	TEMPVAR
           0E1 : 90C0;  -- 	IN 		XPOS
           0E2 : 1469;  -- 	STORE	TEMPX
           0E3 : 90C1;  -- 	IN		YPOS
           0E4 : 146A;  -- 	STORE	TEMPY
           0E5 : 0C5D;  -- 	LOAD	X					; L2X <- (X-XPOS) 
           0E6 : 2469;  -- 	SUB		TEMPX				
           0E7 : 12DF;  -- 	STORE	L2X
           0E8 : 0C5E;  -- 	LOAD	Y					; L2Y <- (Y-YPOS)
           0E9 : 246A;  -- 	SUB		TEMPY
           0EA : 12E0;  -- 	STORE	L2Y
           0EB : 82B5;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((X-XPOS)^2+(Y-YPOS)^2)
           0EC : 245F;  -- 	SUB		TEMPVAR				; DISTANCE TO CLOSEST OBJECT
           0ED : 1B4E;  -- 	ADD		HALFFEET			; FOR CALIBRATION
           0EE : 30DC;  -- 	JNEG	MOVETOWARDSOBJECT	; IF ROBOT HAS NOT ROTATED FAR ENOUGH, REPEAT
           0EF : 90C0;  -- 	IN		XPOS				; XLOCATION = XPOS OF ROBOT AFTER IT REACHED THE OBJECT
           0F0 : 146B;  -- 	STORE	XLOCATION
           0F1 : 90C1;  -- 	IN		YPOS				; YLOCATION = YPOS OF ROBOT AFTER IT REACHED THE OBJECT
           0F2 : 146C;  -- 	STORE	YLOCATION
           0F3 : 0C53;  -- 	LOAD	UP					; IF THE ROBOT FOUND SOMETHING IN THE MIDDLE
           0F4 : 6FFF;  -- 	ADDI	-1
           0F5 : 40FB;  -- 	JZERO	BACKUPUPSETUP
           0F6 : 0C52;  -- 	LOAD	LEFT				; IF THE ROBOT FOUND SOMETHING TO ITS RIGHT 
           0F7 : 4108;  -- 	JZERO	BACKUPRIGHTSETUP
           0F8 : 0C52;  -- 	LOAD	LEFT				; IF THE ROBOT FOUND SOMETHING TO ITS LEFT 
           0F9 : 6FFF;  -- 	ADDI	-1
           0FA : 4115;  -- 	JZERO	BACKUPLEFTSETUP
           0FB : 0C6C;  -- 	LOAD	YLOCATION
           0FC : 2350;  -- 	SUB		TINYFEET
           0FD : 146C;  -- 	STORE	YLOCATION
           0FE : 28FF;  -- 	JUMP	BACKUPUP
           0FF : 0B3F;  -- 	LOAD	RMid
           100 : 9883;  -- 	OUT		LVELCMD
           101 : 988B;  -- 	OUT		RVELCMD
           102 : 90C1;  -- 	IN		YPOS
           103 : 246C;  -- 	SUB		YLOCATION
           104 : 38FF;  -- 	JPOS	BACKUPUP
           105 : 90C2;  -- 	IN		THETA					
           106 : 1464;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP 
           107 : 2922;  -- 	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           108 : 0C6B;  -- 	LOAD	XLOCATION
           109 : 2350;  -- 	SUB		TINYFEET
           10A : 146B;  -- 	STORE	XLOCATION
           10B : 290C;  -- 	JUMP	BACKUPRIGHT
           10C : 0B3F;  -- 	LOAD	RMid
           10D : 9883;  -- 	OUT		LVELCMD
           10E : 988B;  -- 	OUT		RVELCMD
           10F : 90C0;  -- 	IN		XPOS
           110 : 246B;  -- 	SUB		XLOCATION
           111 : 390C;  -- 	JPOS	BACKUPRIGHT
           112 : 90C2;  -- 	IN		THETA					
           113 : 1464;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP
           114 : 2922;  -- 	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           115 : 0C6B;  -- 	LOAD	XLOCATION			
           116 : 1B50;  -- 	ADD		TINYFEET
           117 : 146B;  -- 	STORE	XLOCATION
           118 : 2919;  -- 	JUMP	BACKUPLEFT
           119 : 0B3F;  -- 	LOAD	RMid
           11A : 9883;  -- 	OUT		LVELCMD
           11B : 988B;  -- 	OUT		RVELCMD
           11C : 90C0;  -- 	IN		XPOS
           11D : 246B;  -- 	SUB		XLOCATION
           11E : 3119;  -- 	JNEG	BACKUPLEFT
           11F : 90C2;  -- 	IN		THETA					
           120 : 1464;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP 
           121 : 2922;  --  	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           122 : 90C0;  -- 	IN		XPOS				; HOMEANGLE = ARCTAN(YPOS/XPOS)
           123 : 124D;  -- 	STORE	AtanX 
           124 : 90C1;  -- 	IN		YPOS
           125 : 124E;  -- 	STORE 	AtanY
           126 : 81EE;  -- 	CALL	Atan2
           127 : 1461;  -- 	STORE	HOMEANGLE		
           128 : 0B39;  -- 	LOAD	Deg180				; ANGLE FOR ROTATING RIGHT
           129 : 1C61;  -- 	ADD		HOMEANGLE			; CORRECTANGLE = 180 + HOMEANGLE + 20
           12A : 146D;  -- 	STORE	CORRECTANGLE
           12B : 0B38;  -- 	LOAD	Deg90				; ANGLE FOR WHEN THE ROBOT IS IN THE MIDDLE 
           12C : 1C61;  -- 	ADD		HOMEANGLE			; UPANGLE = 90 + HOMEANGLE
           12D : 146E;  -- 	STORE	UPANGLE
           12E : 0C53;  -- 	LOAD	UP					; IF THE ROBOT IS IN THE MIDDLE
           12F : 6FFF;  -- 	ADDI	-1
           130 : 4136;  -- 	JZERO	HOMEROTATEUP
           131 : 0C52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE RIGHT OF THE ROBOT, TURN RIGHT TO FACE HOME
           132 : 4143;  -- 	JZERO	HOMEROTATERIGHT
           133 : 0C52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE LEFT OF THE ROBOT, TURN LEFT TO FACE HOME
           134 : 6FFF;  -- 	ADDI	-1
           135 : 414F;  -- 	JZERO	HOMEROTATELEFT
           136 : 0B3E;  -- 	LOAD	FMid				; ROTATE CORRECT DEGREES TO THE LEFT
           137 : 988B;  -- 	OUT		RVELCMD
           138 : 90C2;  -- 	IN 		THETA 
           139 : 2464;  -- 	SUB		TEMPTHETA
           13A : 246E;  -- 	SUB		UPANGLE	
           13B : 3136;  -- 	JNEG	HOMEROTATEUP
           13C : 90C0;  -- 	IN 		XPOS				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           13D : 1465;  -- 	STORE	GOHOMEX				
           13E : 90C1;  -- 	IN		YPOS				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME
           13F : 1466;  -- 	STORE	GOHOMEY	
           140 : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           141 : 1464;  -- 	STORE	TEMPTHETA
           142 : 295C;  -- 	JUMP	CALCHOMEDIST
           143 : 0B3E;  -- 	LOAD	FMid
           144 : 9883;  -- 	OUT 	LVELCMD
           145 : 90C2;  -- 	IN		THETA				
           146 : 246D;  -- 	SUB		CORRECTANGLE
           147 : 3943;  -- 	JPOS	HOMEROTATERIGHT
           148 : 90C0;  -- 	IN 		XPOS				
           149 : 1465;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           14A : 90C1;  -- 	IN		YPOS
           14B : 1466;  -- 	STORE	GOHOMEY				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           14C : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT AFTER IT ROTATES TOWARDS HOME
           14D : 1464;  -- 	STORE	TEMPTHETA
           14E : 295C;  -- 	JUMP	CALCHOMEDIST
           14F : 0B3E;  -- 	LOAD	FMid				; ROTATE CORRECT DEGREES TO THE LEFT TO FACE HOME
           150 : 988B;  -- 	OUT		RVELCMD
           151 : 90C2;  -- 	IN 		THETA 
           152 : 2464;  -- 	SUB		TEMPTHETA
           153 : 2461;  -- 	SUB		HOMEANGLE	
           154 : 314F;  -- 	JNEG	HOMEROTATELEFT
           155 : 90C0;  -- 	IN 		XPOS				
           156 : 1465;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           157 : 90C1;  -- 	IN		YPOS
           158 : 1466;  -- 	STORE	GOHOMEY				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           159 : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT AFTER IT ROTATES TOWARDS HOME
           15A : 1464;  -- 	STORE	TEMPTHETA
           15B : 295C;  -- 	JUMP	CALCHOMEDIST
           15C : 90C0;  -- 	IN		XPOS
           15D : 12DF;  -- 	STORE 	L2X
           15E : 90C1;  -- 	IN		YPOS
           15F : 12E0;  -- 	STORE	L2Y
           160 : 82B5;  -- 	CALL	L2Estimate			
           161 : 1460;  -- 	STORE	HOMEDIST			; HOMEDIST = SQRT((RESETX-XPOS)^2+(RESETX-YPOS)^2)
           162 : 2964;  -- 	JUMP	GOHOME
           163 : 0000;  -- GOHOMEVAR:		DW 0
           164 : 0B3E;  -- 	LOAD	FMid				; MOVE FORWARD TO GO HOME 
           165 : 9883;  -- 	OUT    	LVELCMD     
           166 : 988B;  -- 	OUT    	RVELCMD	
           167 : 90C0;  -- 	IN		XPOS
           168 : 1469;  -- 	STORE	TEMPX
           169 : 90C1;  -- 	IN		YPOS
           16A : 146A;  -- 	STORE	TEMPY
           16B : 0C60;  -- 	LOAD	HOMEDIST			; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           16C : 1467;  -- 	STORE 	TEMPHOME
           16D : 0C65;  -- 	LOAD	GOHOMEX				; L2X <- (GOHOMEX-XPOS) 
           16E : 2469;  -- 	SUB		TEMPX				
           16F : 12DF;  -- 	STORE	L2X
           170 : 0C66;  -- 	LOAD	GOHOMEY				; L2Y <- (GOHOMEY-YPOS)
           171 : 246A;  -- 	SUB		TEMPY
           172 : 12E0;  -- 	STORE	L2Y
           173 : 82B5;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((XPOS-X)^2+(YPOS-Y)^2)
           174 : 2467;  -- 	SUB		TEMPHOME	
           175 : 1B4E;  -- 	ADD		HALFFEET	
           176 : 1163;  -- 	STORE	GOHOMEVAR
           177 : 90AA;  -- 	IN		DIST2
           178 : 2337;  -- 	SUB		TwoFeet
           179 : 9805;  -- 	OUT		SSEG2
           17A : 3185;  -- 	JNEG	ADJUSTHOME
           17B : 0963;  -- 	LOAD	GOHOMEVAR
           17C : 3164;  -- 	JNEG	GOHOME				; HAS NOT REACHED HOME YET
           17D : 82E4;  -- 	CALL	WAIT1
           17E : 82E4;  -- 	CALL	WAIT1
           17F : 82E4;  -- 	CALL	WAIT1
           180 : 82E4;  -- 	CALL	WAIT1
           181 : 82E4;  -- 	CALL 	WAIT1
           182 : 29B9;  -- 	JUMP 	DIE
           183 : 0000;  -- ADJUSTHOMEX:	DW	0
           184 : 0000;  -- ADJUSTHOMEY:	DW	0
           185 : 82E4;  -- 	CALL	WAIT1
           186 : 82E4;  -- 	CALL	WAIT1
           187 : 82E4;  -- 	CALL	WAIT1 
           188 : 90C0;  -- 	IN 		XPOS
           189 : 1183;  -- 	STORE	ADJUSTHOMEX
           18A : 90C1;  -- 	IN		YPOS
           18B : 1184;  -- 	STORE	ADJUSTHOMEY
           18C : 0983;  -- 	LOAD	ADJUSTHOMEX
           18D : 2184;  -- 	SUB		ADJUSTHOMEY
           18E : 3990;  -- 	JPOS	ADJUSTHOMERIGHT
           18F : 31A1;  -- 	JNEG	ADJUSTHOMELEFT
           190 : 90C2;  -- 	IN 		THETA
           191 : 9805;  -- 	OUT		SSEG2
           192 : 0B3C;  -- 	LOAD	FSlow
           193 : 9883;  -- 	OUT		LVELCMD
           194 : 90C2;  -- 	IN 		THETA
           195 : 6F4C;  -- 	ADDI	-180
           196 : 3990;  -- 	JPOS	ADJUSTHOMERIGHT
           197 : 3198;  -- 	JNEG	TOHOMEBASERIGHT
           198 : 90C2;  -- 	IN 		THETA
           199 : 9805;  -- 	OUT		SSEG2
           19A : 0B3C;  -- 	LOAD	FSlow
           19B : 9883;  -- 	OUT		LVELCMD
           19C : 988B;  -- 	OUT		RVELCMD
           19D : 90AA;  -- 	IN		DIST2
           19E : 2351;  -- 	SUB		WALLSTOP
           19F : 3998;  -- 	JPOS	TOHOMEBASERIGHT
           1A0 : 31B9;  -- 	JNEG	DIE	
           1A1 : 90C2;  -- 	IN 		THETA
           1A2 : 9805;  -- 	OUT		SSEG2
           1A3 : 0B3C;  -- 	LOAD	FSlow
           1A4 : 988B;  -- 	OUT		RVELCMD
           1A5 : 90C2;  -- 	IN 		THETA
           1A6 : 6F4C;  -- 	ADDI	-180
           1A7 : 31A1;  -- 	JNEG	ADJUSTHOMELEFT
           1A8 : 39A9;  -- 	JPOS	TOHOMEBASELEFT
           1A9 : 90C2;  -- 	IN 		THETA
           1AA : 9805;  -- 	OUT		SSEG2
           1AB : 0B3C;  -- 	LOAD	FSlow
           1AC : 9883;  -- 	OUT		LVELCMD
           1AD : 988B;  -- 	OUT		RVELCMD
           1AE : 90AA;  -- 	IN		DIST2
           1AF : 2351;  -- 	SUB		WALLSTOP
           1B0 : 39A9;  -- 	JPOS	TOHOMEBASELEFT
           1B1 : 31B9;  -- 	JNEG	DIE
           1B2 : 0800;  -- 	LOAD	0
           1B3 : 980A;  -- 	OUT		BEEP	
           1B4 : 29B2;  -- 	JUMP 	NOISE
           1B5 : 0800;  -- 	LOAD	0
           1B6 : 9883;  -- 	OUT    	LVELCMD     
           1B7 : 988B;  -- 	OUT    	RVELCMD	
           1B8 : 29B5;  -- 	JUMP 	NOPE
           1B9 : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           1BA : 0B20;  -- 	LOAD   Zero         ; Stop everything.
           1BB : 9883;  -- 	OUT    LVELCMD
           1BC : 988B;  -- 	OUT    RVELCMD
           1BD : 98B2;  -- 	OUT    SONAREN
           1BE : 09C1;  -- 	LOAD   DEAD         ; An indication that we are dead
           1BF : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           1C0 : 29C0;  -- 	JUMP   Forever      ; Do this forever.
           1C1 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           1C2 : 81C6;  -- 	CALL   ControlMovement
           1C3 : B000;  -- 	RETI   ; return from ISR
           1C4 : 0000;  -- DTheta:    DW 0
           1C5 : 0000;  -- DVel:      DW 0
           1C6 : 90C2;  -- 	IN     THETA
           1C7 : 21C4;  -- 	SUB    DTheta      ; actual - desired angle
           1C8 : 81EB;  -- 	CALL   Neg         ; desired - actual angle
           1C9 : 68B4;  -- 	ADDI   180
           1CA : 81E4;  -- 	CALL   Mod360
           1CB : 6F4C;  -- 	ADDI   -180
           1CC : 6002;  -- 	SHIFT  2
           1CD : 11D8;  -- 	STORE  CMAErr      ; hold temporarily
           1CE : 09C5;  -- 	LOAD   DVel
           1CF : 19D8;  -- 	ADD    CMAErr
           1D0 : 81D9;  -- 	CALL   CapVel      ; ensure velocity is valid
           1D1 : 988B;  -- 	OUT    RVELCMD
           1D2 : 09D8;  -- 	LOAD   CMAErr
           1D3 : 81EB;  -- 	CALL   Neg         ; left wheel gets negative differential
           1D4 : 19C5;  -- 	ADD    DVel
           1D5 : 81D9;  -- 	CALL   CapVel
           1D6 : 9883;  -- 	OUT    LVELCMD
           1D7 : 8800;  -- 	RETURN
           1D8 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           1D9 : 6E0C;  -- 	ADDI    -500
           1DA : 39E0;  -- 	JPOS    CapVelHigh
           1DB : 69F4;  -- 	ADDI    500
           1DC : 69F4;  -- 	ADDI    500
           1DD : 31E2;  -- 	JNEG    CapVelLow
           1DE : 6E0C;  -- 	ADDI    -500
           1DF : 8800;  -- 	RETURN
           1E0 : B9F4;  -- 	LOADI   500
           1E1 : 8800;  -- 	RETURN
           1E2 : BE0C;  -- 	LOADI   -500
           1E3 : 8800;  -- 	RETURN
           1E4 : 31E7;  -- 	JNEG   M360N
           1E5 : 6E98;  -- 	ADDI   -360
           1E6 : 29E4;  -- 	JUMP   Mod360
           1E7 : 6968;  -- 	ADDI   360
           1E8 : 31E7;  -- 	JNEG   M360N
           1E9 : 8800;  -- 	RETURN
           1EA : 39ED;  -- 	JPOS   Abs_r
           1EB : 5B1F;  -- 	XOR    NegOne       ; Flip all bits
           1EC : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1ED : 8800;  -- 	RETURN
           1EE : 0A4E;  -- 	LOAD   AtanY
           1EF : 81EA;  -- 	CALL   Abs          ; abs(y)
           1F0 : 1250;  -- 	STORE  AtanT
           1F1 : 0A4D;  -- 	LOAD   AtanX        ; abs(x)
           1F2 : 81EA;  -- 	CALL   Abs
           1F3 : 2250;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           1F4 : 31FF;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           1F5 : 0A4D;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           1F6 : 31FC;  -- 	JNEG   A2_R3
           1F7 : 820E;  -- 	CALL   A2_calc      ; Octants 1, 8
           1F8 : 31FA;  -- 	JNEG   A2_R1n
           1F9 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           1FA : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           1FB : 8800;  -- 	RETURN
           1FC : 820E;  -- 	CALL   A2_calc      ; Octants 4, 5            
           1FD : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           1FE : 8800;  -- 	RETURN
           1FF : 0A4E;  -- 	LOAD   AtanY        ; Swap input arguments
           200 : 1250;  -- 	STORE  AtanT
           201 : 0A4D;  -- 	LOAD   AtanX
           202 : 124E;  -- 	STORE  AtanY
           203 : 0A50;  -- 	LOAD   AtanT
           204 : 124D;  -- 	STORE  AtanX
           205 : 3A0A;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           206 : 820E;  -- 	CALL   A2_calc      ; else octants 6, 7
           207 : 81EB;  -- 	CALL   Neg          ; Negatge the number
           208 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           209 : 8800;  -- 	RETURN
           20A : 820E;  -- 	CALL   A2_calc      ; Octants 2, 3
           20B : 81EB;  -- 	CALL   Neg          ; negate the angle
           20C : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           20D : 8800;  -- 	RETURN
           20E : 0A4E;  -- 	LOAD   AtanY
           20F : 12AD;  -- 	STORE  d16sN        ; Y in numerator
           210 : 0A4D;  -- 	LOAD   AtanX
           211 : 12AE;  -- 	STORE  d16sD        ; X in denominator
           212 : 823A;  -- 	CALL   A2_div       ; divide
           213 : 0AB3;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           214 : 124F;  -- 	STORE  AtanRatio
           215 : 1276;  -- 	STORE  m16sA
           216 : 1277;  -- 	STORE  m16sB
           217 : 8231;  -- 	CALL   A2_mult      ; X^2
           218 : 1276;  -- 	STORE  m16sA
           219 : 0A51;  -- 	LOAD   A2c
           21A : 1277;  -- 	STORE  m16sB
           21B : 8231;  -- 	CALL   A2_mult
           21C : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           21D : 12AE;  -- 	STORE  d16sD
           21E : 0A4F;  -- 	LOAD   AtanRatio
           21F : 12AD;  -- 	STORE  d16sN        ; Ratio in numerator
           220 : 823A;  -- 	CALL   A2_div       ; divide
           221 : 0AB3;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           222 : 1276;  -- 	STORE  m16sA        ; <= result in radians
           223 : 0A52;  -- 	LOAD   A2cd         ; degree conversion factor
           224 : 1277;  -- 	STORE  m16sB
           225 : 8231;  -- 	CALL   A2_mult      ; convert to degrees
           226 : 1250;  -- 	STORE  AtanT
           227 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           228 : 4B21;  -- 	AND    One
           229 : 422E;  -- 	JZERO  A2_rdwn      ; round down
           22A : 0A50;  -- 	LOAD   AtanT
           22B : 6018;  -- 	SHIFT  -8
           22C : 6801;  -- 	ADDI   1            ; round up
           22D : 8800;  -- 	RETURN
           22E : 0A50;  -- 	LOAD   AtanT
           22F : 6018;  -- 	SHIFT  -8           ; round down
           230 : 8800;  -- 	RETURN
           231 : 8253;  -- 	CALL   Mult16s
           232 : 0A7B;  -- 	LOAD   mres16sH
           233 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           234 : 127B;  -- 	STORE  mres16sH
           235 : 0A7A;  -- 	LOAD   mres16sL
           236 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           237 : 4B33;  -- 	AND    LowByte
           238 : 527B;  -- 	OR     mres16sH     ; combine high and low words of result
           239 : 8800;  -- 	RETURN
           23A : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           23B : 1250;  -- 	STORE  AtanT
           23C : 0A50;  -- 	LOAD   AtanT
           23D : 6FFF;  -- 	ADDI   -1
           23E : 3A41;  -- 	JPOS   A2_DN        ; not done; continue shifting
           23F : 827C;  -- 	CALL   Div16s       ; do the standard division
           240 : 8800;  -- 	RETURN
           241 : 1250;  -- 	STORE  AtanT
           242 : 0AAD;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           243 : 6001;  -- 	SHIFT  1
           244 : 5AAD;  -- 	XOR    d16sN        ; if the sign changed,
           245 : 3249;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           246 : 5AAD;  -- 	XOR    d16sN        ; get back shifted version
           247 : 12AD;  -- 	STORE  d16sN
           248 : 2A3C;  -- 	JUMP   A2_DL
           249 : 0AAE;  -- 	LOAD   d16sD
           24A : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           24B : 12AE;  -- 	STORE  d16sD
           24C : 2A3C;  -- 	JUMP   A2_DL
           24D : 0000;  -- AtanX:      DW 0
           24E : 0000;  -- AtanY:      DW 0
           24F : 0000;  -- AtanRatio:  DW 0        ; =y/x
           250 : 0000;  -- AtanT:      DW 0        ; temporary value
           251 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           252 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           253 : B800;  -- 	LOADI  0
           254 : 1278;  -- 	STORE  m16sc        ; clear carry
           255 : 127B;  -- 	STORE  mres16sH     ; clear result
           256 : B810;  -- 	LOADI  16           ; load 16 to counter
           257 : 1279;  -- 	STORE  mcnt16s      
           258 : 0A78;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           259 : 425D;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           25A : 0A7B;  -- 	LOAD   mres16sH     ; if a carry, 
           25B : 1A76;  -- 	ADD    m16sA        ;  add multiplicand to result H
           25C : 127B;  -- 	STORE  mres16sH
           25D : 0A77;  -- 	LOAD   m16sB
           25E : 4B21;  -- 	AND    One          ; check bit 0 of multiplier
           25F : 1278;  -- 	STORE  m16sc        ; save as next carry
           260 : 4264;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           261 : 0A7B;  -- 	LOAD   mres16sH     ; if bit 0 set,
           262 : 2276;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           263 : 127B;  -- 	STORE  mres16sH
           264 : 0A77;  -- 	LOAD   m16sB
           265 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           266 : 4A75;  -- 	AND    c7FFF        ; clear msb
           267 : 1277;  -- 	STORE  m16sB
           268 : 0A7B;  -- 	LOAD   mres16sH     ; load result H
           269 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           26A : 5277;  -- 	OR     m16sB
           26B : 1277;  -- 	STORE  m16sB        ; result L now includes carry out from H
           26C : 0A7B;  -- 	LOAD   mres16sH
           26D : 6011;  -- 	SHIFT  -1
           26E : 127B;  -- 	STORE  mres16sH     ; shift result H >>1
           26F : 0A79;  -- 	LOAD   mcnt16s
           270 : 6FFF;  -- 	ADDI   -1           ; check counter
           271 : 3A57;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           272 : 0A77;  -- 	LOAD   m16sB
           273 : 127A;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           274 : 8800;  -- 	RETURN              ; Done
           275 : 7FFF;  -- c7FFF: DW &H7FFF
           276 : 0000;  -- m16sA: DW 0 ; multiplicand
           277 : 0000;  -- m16sB: DW 0 ; multipler
           278 : 0000;  -- m16sc: DW 0 ; carry
           279 : 0000;  -- mcnt16s: DW 0 ; counter
           27A : 0000;  -- mres16sL: DW 0 ; result low
           27B : 0000;  -- mres16sH: DW 0 ; result high
           27C : B800;  -- 	LOADI  0
           27D : 12B4;  -- 	STORE  dres16sR     ; clear remainder result
           27E : 12B1;  -- 	STORE  d16sC1       ; clear carry
           27F : 0AAD;  -- 	LOAD   d16sN
           280 : 5AAE;  -- 	XOR    d16sD
           281 : 12AF;  -- 	STORE  d16sS        ; sign determination = N XOR D
           282 : B811;  -- 	LOADI  17
           283 : 12B0;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           284 : 0AAE;  -- 	LOAD   d16sD
           285 : 81EA;  -- 	CALL   Abs          ; take absolute value of denominator
           286 : 12AE;  -- 	STORE  d16sD
           287 : 0AAD;  -- 	LOAD   d16sN
           288 : 81EA;  -- 	CALL   Abs          ; take absolute value of numerator
           289 : 12AD;  -- 	STORE  d16sN
           28A : 0AAD;  -- 	LOAD   d16sN
           28B : 601F;  -- 	SHIFT  -15          ; get msb
           28C : 4B21;  -- 	AND    One          ; only msb (because shift is arithmetic)
           28D : 12B2;  -- 	STORE  d16sC2       ; store as carry
           28E : 0AAD;  -- 	LOAD   d16sN
           28F : 6001;  -- 	SHIFT  1            ; shift <<1
           290 : 52B1;  -- 	OR     d16sC1       ; with carry
           291 : 12AD;  -- 	STORE  d16sN
           292 : 0AB0;  -- 	LOAD   d16sT
           293 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           294 : 42A4;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           295 : 12B0;  -- 	STORE  d16sT
           296 : 0AB4;  -- 	LOAD   dres16sR
           297 : 6001;  -- 	SHIFT  1            ; shift remainder
           298 : 52B2;  -- 	OR     d16sC2       ; with carry from other shift
           299 : 22AE;  -- 	SUB    d16sD        ; subtract denominator from remainder
           29A : 329F;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           29B : 12B4;  -- 	STORE  dres16sR
           29C : B801;  -- 	LOADI  1
           29D : 12B1;  -- 	STORE  d16sC1       ; set carry
           29E : 2A8A;  -- 	JUMP   Div16s_loop
           29F : 1AAE;  -- 	ADD    d16sD        ; add denominator back in
           2A0 : 12B4;  -- 	STORE  dres16sR
           2A1 : B800;  -- 	LOADI  0
           2A2 : 12B1;  -- 	STORE  d16sC1       ; clear carry
           2A3 : 2A8A;  -- 	JUMP   Div16s_loop
           2A4 : 0AAD;  -- 	LOAD   d16sN
           2A5 : 12B3;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           2A6 : 0AAF;  -- 	LOAD   d16sS        ; check the sign indicator
           2A7 : 32A9;  -- 	JNEG   Div16s_neg
           2A8 : 8800;  -- 	RETURN
           2A9 : 0AB3;  -- 	LOAD   dres16sQ     ; need to negate the result
           2AA : 81EB;  -- 	CALL   Neg
           2AB : 12B3;  -- 	STORE  dres16sQ
           2AC : 8800;  -- 	RETURN	
           2AD : 0000;  -- d16sN: DW 0 ; numerator
           2AE : 0000;  -- d16sD: DW 0 ; denominator
           2AF : 0000;  -- d16sS: DW 0 ; sign value
           2B0 : 0000;  -- d16sT: DW 0 ; temp counter
           2B1 : 0000;  -- d16sC1: DW 0 ; carry value
           2B2 : 0000;  -- d16sC2: DW 0 ; carry value
           2B3 : 0000;  -- dres16sQ: DW 0 ; quotient result
           2B4 : 0000;  -- dres16sR: DW 0 ; remainder result
           2B5 : 0ADF;  -- 	LOAD   L2X
           2B6 : 81EA;  -- 	CALL   Abs
           2B7 : 12E1;  -- 	STORE  L2T1
           2B8 : 0AE0;  -- 	LOAD   L2Y
           2B9 : 81EA;  -- 	CALL   Abs
           2BA : 22E1;  -- 	SUB    L2T1
           2BB : 32D7;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           2BC : 1AE1;  -- 	ADD    L2T1
           2BD : 1276;  -- 	STORE  m16sa
           2BE : B8F6;  -- 	LOADI  246       ; max * 246
           2BF : 1277;  -- 	STORE  m16sB
           2C0 : 8253;  -- 	CALL   Mult16s
           2C1 : 0A7B;  -- 	LOAD   mres16sH
           2C2 : 6008;  -- 	SHIFT  8
           2C3 : 12E2;  -- 	STORE  L2T2
           2C4 : 0A7A;  -- 	LOAD   mres16sL
           2C5 : 6018;  -- 	SHIFT  -8        ; / 256
           2C6 : 4B33;  -- 	AND    LowByte
           2C7 : 52E2;  -- 	OR     L2T2
           2C8 : 12E3;  -- 	STORE  L2T3
           2C9 : 0AE1;  -- 	LOAD   L2T1
           2CA : 1276;  -- 	STORE  m16sa
           2CB : B868;  -- 	LOADI  104       ; min * 104
           2CC : 1277;  -- 	STORE  m16sB
           2CD : 8253;  -- 	CALL   Mult16s
           2CE : 0A7B;  -- 	LOAD   mres16sH
           2CF : 6008;  -- 	SHIFT  8
           2D0 : 12E2;  -- 	STORE  L2T2
           2D1 : 0A7A;  -- 	LOAD   mres16sL
           2D2 : 6018;  -- 	SHIFT  -8        ; / 256
           2D3 : 4B33;  -- 	AND    LowByte
           2D4 : 52E2;  -- 	OR     L2T2
           2D5 : 1AE3;  -- 	ADD    L2T3     ; sum
           2D6 : 8800;  -- 	RETURN
           2D7 : 1AE1;  -- 	ADD    L2T1
           2D8 : 12E2;  -- 	STORE  L2T2
           2D9 : 0AE1;  -- 	LOAD   L2T1
           2DA : 12E3;  -- 	STORE  L2T3
           2DB : 0AE2;  -- 	LOAD   L2T2
           2DC : 12E1;  -- 	STORE  L2T1
           2DD : 0AE3;  -- 	LOAD   L2T3
           2DE : 2ABD;  -- 	JUMP   CalcDist
           2DF : 0000;  -- L2X:  DW 0
           2E0 : 0000;  -- L2Y:  DW 0
           2E1 : 0000;  -- L2T1: DW 0
           2E2 : 0000;  -- L2T2: DW 0
           2E3 : 0000;  -- L2T3: DW 0
           2E4 : 9802;  -- 	OUT    TIMER
           2E5 : 9002;  -- 	IN     TIMER
           2E6 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           2E7 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           2E8 : 32E5;  -- 	JNEG   Wloop
           2E9 : 8800;  -- 	RETURN
           2EA : 8302;  -- 	CALL   GetBattLvl
           2EB : 42EA;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           2EC : 2342;  -- 	SUB    MinBatt
           2ED : 32F0;  -- 	JNEG   DeadBatt
           2EE : 1B42;  -- 	ADD    MinBatt     ; get original value back
           2EF : 8800;  -- 	RETURN
           2F0 : B820;  -- 	LOADI  &H20
           2F1 : 980A;  -- 	OUT    BEEP        ; start beep sound
           2F2 : 8302;  -- 	CALL   GetBattLvl  ; get the battery level
           2F3 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           2F4 : 9805;  -- 	OUT    SSEG2
           2F5 : 9806;  -- 	OUT    LCD
           2F6 : 0B20;  -- 	LOAD   Zero
           2F7 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           2F8 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           2F9 : 9807;  -- 	OUT    XLEDS
           2FA : 82E4;  -- 	CALL   Wait1       ; 1 second
           2FB : 0B20;  -- 	Load   Zero
           2FC : 980A;  -- 	OUT    BEEP        ; stop beeping
           2FD : 0B20;  -- 	LOAD   Zero
           2FE : 9801;  -- 	OUT    LEDS        ; LEDs off
           2FF : 9807;  -- 	OUT    XLEDS
           300 : 82E4;  -- 	CALL   Wait1       ; 1 second
           301 : 2AF0;  -- 	JUMP   DeadBatt    ; repeat forever
           302 : 0B44;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           303 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           304 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           305 : 8310;  -- 	CALL   BlockI2C    ; wait for it to finish
           306 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           307 : 8800;  -- 	RETURN
           308 : 8310;  -- 	CALL   BlockI2C    ; wait for idle
           309 : 0B43;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           30A : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           30B : 0B20;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           30C : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           30D : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           30E : 8310;  -- 	CALL   BlockI2C    ; wait for it to finish
           30F : 8800;  -- 	RETURN
           310 : 0B20;  -- 	LOAD   Zero
           311 : 131E;  -- 	STORE  Temp        ; Used to check for timeout
           312 : 0B1E;  -- 	LOAD   Temp
           313 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           314 : 131E;  -- 	STORE  Temp
           315 : 4319;  -- 	JZERO  I2CError    ; Timeout occurred; error
           316 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           317 : 3B12;  -- 	JPOS   BI2CL       ; If not 0, try again
           318 : 8800;  -- 	RETURN             ; Else return
           319 : 0B20;  -- 	LOAD   Zero
           31A : 692C;  -- 	ADDI   &H12C       ; "I2C"
           31B : 9804;  -- 	OUT    SSEG1
           31C : 9805;  -- 	OUT    SSEG2       ; display error message
           31D : 2B19;  -- 	JUMP   I2CError
           31E : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           31F : FFFF;  -- NegOne:   DW -1
           320 : 0000;  -- Zero:     DW 0
           321 : 0001;  -- One:      DW 1
           322 : 0002;  -- Two:      DW 2
           323 : 0003;  -- Three:    DW 3
           324 : 0004;  -- Four:     DW 4
           325 : 0005;  -- Five:     DW 5
           326 : 0006;  -- Six:      DW 6
           327 : 0007;  -- Seven:    DW 7
           328 : 0008;  -- Eight:    DW 8
           329 : 0009;  -- Nine:     DW 9
           32A : 000A;  -- Ten:      DW 10
           32B : 0001;  -- Mask0:    DW &B00000001
           32C : 0002;  -- Mask1:    DW &B00000010
           32D : 0004;  -- Mask2:    DW &B00000100
           32E : 0008;  -- Mask3:    DW &B00001000
           32F : 0010;  -- Mask4:    DW &B00010000
           330 : 0020;  -- Mask5:    DW &B00100000
           331 : 0040;  -- Mask6:    DW &B01000000
           332 : 0080;  -- Mask7:    DW &B10000000
           333 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           334 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           335 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           336 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           337 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           338 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           339 : 00B4;  -- Deg180:   DW 180       ; 180
           33A : 010E;  -- Deg270:   DW 270       ; 270
           33B : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           33C : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           33D : FF9C;  -- RSlow:    DW -100
           33E : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           33F : FEA2;  -- RMid:     DW -350
           340 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           341 : FE0C;  -- RFast:    DW -500
           342 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           343 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           344 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           345 : 0096;  -- NINTY:			DW		150
           346 : 002C;  -- FOURTYFOUR:		DW		44
           347 : 000C;  -- TWELVE:			DW		12
           348 : 010E;  -- NEGNINTY:		DW		270
           349 : 013C;  -- NEGFOURTYFOUR:	DW		316
           34A : 015C;  -- NEGTWELVE:		DW		348
           34B : 270F;  -- EEEE:			DW		9999
           34C : AAAA;  -- AAAA:			DW		&HAAAA
           34D : FFFF;  -- FFFF:			DW		&HFFFF
           34E : 0092;  -- HALFFEET:		DW		146       
           34F : 0167;  -- THREEFIVENINE:	DW		359
           350 : 0032;  -- TINYFEET:		DW		50
           351 : 012C;  -- WALLSTOP:		DW		300
           450 : 270F;  -- CURRENTSENSOR:	DW		9999		; CURRENT SENSOR USED FOR CALCULATIONS
           451 : 0000;  -- CURRENTANGLE:	DW		0			; CURRENT ANGLE OF THE SENSOR
           452 : 0001;  -- LEFT:			DW		1			; 1 == LEFT; 0 = RIGHT
           453 : 0000;  -- UP:				DW		0			; 1 == UP; 0 == LEFT/RIGHT
           454 : FFFF;  -- SENSOR0:		DW		&HFFFF
           455 : FFFF;  -- SENSOR1:		DW		&HFFFF
           456 : FFFF;  -- SENSOR2:		DW		&HFFFF
           457 : FFFF;  -- SENSOR3:		DW		&HFFFF
           458 : FFFF;  -- SENSOR4:		DW		&HFFFF
           459 : FFFF;  -- SENSOR5:		DW		&HFFFF
           45A : FFFF;  -- TEMPDIST:		DW		&HFFFF		; USED FOR CALCULATIONS
           45B : FFFF;  -- TEMPORARY:		DW		&HFFFF	
           45C : 0000;  -- CALCTHETA:		DW		0
           45D : 0000;  -- X:				DW		0			; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           45E : 0000;  -- Y:				DW		0			; Y POSITION OF ROBOT AFTER IT FOES UP THE MIDDLE 
           45F : 0000;  -- TEMPVAR:		DW		0			; DISTANCE FROM ROBOT TO CLOSEST OBJECT
           460 : 0000;  -- HOMEDIST:		DW		0			; DISTANCE FROM THE ROBOT TO HOMEBASE
           461 : 0000;  -- HOMEANGLE:		DW		0			; ANGLE FROM ROBOT TO HOMEBASE
           462 : 0000;  -- CALCX:			DW		0		
           463 : 0000;  -- CALCY:			DW		0
           464 : 0000;  -- TEMPTHETA:		DW		0			; THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           465 : 0000;  -- GOHOMEX:		DW		0			; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           466 : 0000;  -- GOHOMEY:		DW		0			; Y POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           467 : 0000;  -- TEMPHOME:		DW		0
           468 : 0000;  -- FOUND:			DW		0			; IF SOMETHING IS FOUND, FOUND=1. ELSE, FOUND=0
           469 : 0000;  -- TEMPX:			DW		0
           46A : 0000;  -- TEMPY:			DW		0
           46B : 0000;  -- XLOCATION:		DW		0
           46C : 0000;  -- YLOCATION:		DW		0
           46D : 0000;  -- CORRECTANGLE:	DW		0
           46E : 0000;  -- UPANGLE:		DW		0
  END;
