-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0B33;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 831B;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 82FD;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           009 : 4B42;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00A : 3810;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00B : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00C : 4B3F;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00D : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           00E : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           00F : 2808;  -- 	JUMP   WaitForSafety
           010 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           011 : 4B3F;  -- 	AND    Mask1
           012 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           013 : 1331;  -- 	STORE  Temp        ; (overkill, but looks nice)
           014 : 6001;  -- 	SHIFT  1
           015 : 5331;  -- 	OR     Temp
           016 : 9807;  -- 	OUT    XLEDS
           017 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           018 : 4B40;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           019 : 3810;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01A : 0B33;  -- 	LOAD   Zero
           01B : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           01C : 98C3;  -- 	OUT		RESETPOS			; RESTORE VARIABLES 
           01D : 0B5E;  -- 	LOAD 	EEEE
           01E : 1450;  -- 	STORE	CURRENTSENSOR						
           01F : 0B34;  -- 	LOAD	One
           020 : 1452;  -- 	STORE	LEFT
           021 : 0B60;  -- 	LOAD	FFFF
           022 : 1454;  -- 	STORE	SENSOR0
           023 : 1455;  -- 	STORE	SENSOR2
           024 : 1456;  -- 	STORE	SENSOR3
           025 : 1457;  -- 	STORE	SENSOR5
           026 : 1458;  -- 	STORE 	TEMPDIST
           027 : 1459;  -- 	STORE	TEMPORARY 
           028 : 0B33;  -- 	LOAD	Zero
           029 : 1451;  -- 	STORE	CURRENTANGLE	
           02A : 145B;  -- 	STORE	X
           02B : 145C;  -- 	STORE	Y
           02C : 145D;  -- 	STORE	TEMPVAR
           02D : 145E;  -- 	STORE	HOMEDIST
           02E : 145F;  -- 	STORE	HOMEANGLE
           02F : 1460;  -- 	STORE	CALCX
           030 : 1461;  -- 	STORE	CALCY
           031 : 1462;  -- 	STORE	TEMPTHETA
           032 : 1463;  -- 	STORE	GOHOMEX
           033 : 1464;  -- 	STORE	GOHOMEY
           034 : 1465;  -- 	STORE	TEMPHOME
           035 : 145A;  -- 	STORE	CALCTHETA
           036 : 1467;  -- 	STORE	TEMPX
           037 : 1468;  -- 	STORE	TEMPY
           038 : 146B;  -- 	STORE	CORRECTANGLE
           039 : 1466;  -- 	STORE	FOUND
           03A : 146C;  -- 	STORE	UPANGLE
           03B : 1453;  -- 	STORE	UP
           03C : 1469;  -- 	STORE	XLOCATION
           03D : 146A;  -- 	STORE	YLOCATION
           03E : 0B3E;  -- 	LOAD 	Mask0				; ENABLES SENSOR 0, 2, 3, 5
           03F : 5340;  --  	OR 		Mask2
           040 : 5341;  --  	OR		Mask3
           041 : 5343;  -- 	OR		Mask5	
           042 : 98B2;  --   	OUT 	SONAREN 
           043 : 2844;  --   	JUMP	GO4FEET
           044 : 90C0;  -- 	IN 		XPOS
           045 : 9804;  -- 	OUT		SSEG1
           046 : 90C1;  -- 	IN 		YPOS
           047 : 9805;  -- 	OUT		SSEG2
           048 : 0B51;  -- 	LOAD   	FMid        		; GO FORWARD
           049 : 9883;  -- 	OUT    	LVELCMD     
           04A : 988B;  -- 	OUT    	RVELCMD	
           04B : 90C0;  -- 	IN		XPOS				; GET XPOS OF THE ROBOT
           04C : 234A;  -- 	SUB		TwoFeet				; SUBTRACT 4 FEET
           04D : 3044;  -- 	JNEG	GO4FEET				; IF YOU HAVE NOT GONE 4 FEET, JUMP UP
           04E : 284F;  -- 	JUMP	ROTATE				; IF YOU HAVE GONE 4 FEET, START ROTATION		
           04F : 90C0;  -- 	IN 		XPOS
           050 : 9804;  -- 	OUT		SSEG1
           051 : 90C1;  -- 	IN 		YPOS
           052 : 9805;  -- 	OUT		SSEG2
           053 : 0B51;  -- 	LOAD	FMid				; START CALCULATION FOR ROTATING 90 DEGREES TO THE LEFT
           054 : 988B;  -- 	OUT		RVELCMD
           055 : 90C2;  -- 	IN 		THETA 
           056 : 145A;  -- 	STORE	CALCTHETA
           057 : 6F4C;  -- 	ADDI	-180
           058 : 385A;  -- 	JPOS	ADJUST				; ROBOT ROTATED SLIGHTLY TO THE RIGHT. NEED TO ADJUST THETA
           059 : 285E;  -- 	JUMP	ROTATE2				; DO NOT NEED TO ADJUST THETA. ROTATE
           05A : 0C5A;  -- 	LOAD	CALCTHETA
           05B : 6E99;  -- 	ADDI	-359
           05C : 145A;  -- 	STORE	CALCTHETA
           05D : 285E;  -- 	JUMP	ROTATE2			
           05E : 90C0;  -- 	IN 		XPOS
           05F : 9804;  -- 	OUT		SSEG1
           060 : 90C1;  -- 	IN 		YPOS
           061 : 9805;  -- 	OUT		SSEG2
           062 : 0C5A;  -- 	LOAD	CALCTHETA			 
           063 : 6FC4;  -- 	ADDI	-60
           064 : 304F;  -- 	JNEG	ROTATE				; IF YOU HAVE NOT ROTATE ENOUGH, ROTATE AGAIN
           065 : 2866;  -- 	JUMP	FORWARD				; IF YOU HAVE ROTATED 90 DEGREES, GO FORWARD
           066 : 90C0;  -- 	IN 		XPOS
           067 : 9804;  -- 	OUT		SSEG1
           068 : 90C1;  -- 	IN 		YPOS
           069 : 9805;  -- 	OUT		SSEG2
           06A : 0B51;  -- 	LOAD	FMid				
           06B : 9883;  -- 	OUT    	LVELCMD     		
           06C : 988B;  -- 	OUT    	RVELCMD	
           06D : 286E;  -- 	JUMP	SEARCH0				
           06E : 0B5E;  -- 	LOAD	EEEE				; THIS IS THE "CLOSEST" OBJECT
           06F : 1450;  -- 	STORE	CURRENTSENSOR
           070 : 90A8;  -- 	IN 		DIST0				; STORE THE VALUE OF DIST0 TO SENSOR0, IF THERE IS SOMETHING 4 FEET AWAY 
           071 : 1458;  -- 	STORE	TEMPDIST
           072 : 1459;  -- 	STORE	TEMPORARY
           073 : 0C59;  -- 	LOAD	TEMPORARY
           074 : 234A;  -- 	SUB		TWOFEET
           075 : 234A;  -- 	SUB		TWOFEET		
           076 : 3888;  --  	JPOS	SEARCH2				; IF THERE IS NOTHING 4 FEET AWAY, MORE FORWARD
           077 : 3078;  -- 	JNEG	FOUND0				; THERE IS SOMETHING CLOSE BY, STORE IT TO SENSOR0
           078 : 0B34;  -- 	LOAD	One
           079 : 1466;  -- 	STORE	FOUND
           07A : 0C58;  -- 	LOAD	TEMPDIST			
           07B : 1454;  -- 	STORE	SENSOR0
           07C : 287D;  -- 	JUMP 	FINDSMALL0		
           07D : 0C50;  -- 	LOAD	CURRENTSENSOR		; IS SONAR0 THE CLOSEST OBJECT?
           07E : 2454;  -- 	SUB		SENSOR0
           07F : 3881;  -- 	JPOS	CHOSE0				; IF SENSOR0 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR0 AS THE CLOSEST
           080 : 3088;  --  	JNEG	SEARCH2				; ELSE, DETECT OBJECTS IN SENSOR2
           081 : 0C54;  -- 	LOAD	SENSOR0
           082 : 1450;  -- 	STORE	CURRENTSENSOR		; CURRENTSENSOR <= SENSOR0 VALUE
           083 : 0B58;  -- 	LOAD	NINTY
           084 : 1451;  -- 	STORE	CURRENTANGLE		; CURRENTANGLE <= 90
           085 : 0B34;  -- 	LOAD	One
           086 : 1452;  -- 	STORE	LEFT				; LEFT <= 0
           087 : 2888;  --  	JUMP	SEARCH2
           088 : 90AA;  -- 	IN 		DIST2				; DETECT FOR OBJECTS WITH SENSOR2
           089 : 1458;  -- 	STORE	TEMPDIST
           08A : 1459;  -- 	STORE	TEMPORARY
           08B : 0C59;  -- 	LOAD	TEMPORARY
           08C : 234A;  -- 	SUB		TwoFeet				; 
           08D : 38A0;  -- 	JPOS	SEARCH3				; IF MORE THAN 2 FEET AWAY, DO NOT STORE AND MOVE ON TO SEARCH FOR OBJECTS WITH SENSOR3
           08E : 308F;  -- 	JNEG	FOUND2				; IF LESS THAN 2 FEET AWAY
           08F : 0B34;  -- 	LOAD	One					; ROBOT DETECTS SOMETHING WITH SENSOR2, STORE DISTANCE IN SENSOR2
           090 : 1466;  -- 	STORE	FOUND
           091 : 0C58;  -- 	LOAD	TEMPDIST			
           092 : 1455;  -- 	STORE	SENSOR2
           093 : 2894;  -- 	JUMP 	FINDSMALL2
           094 : 0C50;  -- 	LOAD	CURRENTSENSOR		; IS SENSOR2 CLOSER THAN THE CURRENT SMALLEST?
           095 : 2455;  -- 	SUB		SENSOR2
           096 : 3898;  -- 	JPOS	CHOSE2				; OBJECT DETECTED WITH SENSOR2 IS THE SMALLEST CURRENTLY
           097 : 30A0;  -- 	JNEG	SEARCH3				; OBJECT IS NOT THE SMALLEST
           098 : 0C55;  -- 	LOAD	SENSOR2				; CURRENTSENSOR <= SENSOR2
           099 : 1450;  -- 	STORE	CURRENTSENSOR
           09A : 0B33;  -- 	LOAD	Zero				; CURRENTANGLE <= 0
           09B : 1451;  -- 	STORE	CURRENTANGLE
           09C : 0B34;  -- 	LOAD	One					; UP <= 1
           09D : 1453;  -- 	STORE	UP
           09E : 1452;  -- 	STORE	LEFT				; LEFT <= 1
           09F : 28A0;  -- 	JUMP	SEARCH3				; LOOK FOR THIS WITH SENSOR3
           0A0 : 90AB;  -- 	IN 		DIST3				
           0A1 : 1458;  -- 	STORE	TEMPDIST
           0A2 : 1459;  -- 	STORE	TEMPORARY
           0A3 : 0C59;  -- 	LOAD	TEMPORARY
           0A4 : 234A;  -- 	SUB		TwoFeet				
           0A5 : 38B8;  -- 	JPOS	SEARCH5				; IF MORE THAN 2 FEET AWAY, DO NOT STORE AND MOVE ON TO LOOK FOR THINGS WITH SENSOR 5
           0A6 : 30A7;  -- 	JNEG	FOUND3				; DETECTED OBJECT IS CLOSER THAN 2 FEET
           0A7 : 0B34;  -- 	LOAD	One
           0A8 : 1466;  -- 	STORE	FOUND
           0A9 : 0C58;  -- 	LOAD	TEMPDIST			
           0AA : 1456;  -- 	STORE	SENSOR3
           0AB : 28AC;  -- 	JUMP 	FINDSMALL3
           0AC : 0C50;  -- 	LOAD	CURRENTSENSOR		
           0AD : 2456;  -- 	SUB		SENSOR3
           0AE : 38B0;  -- 	JPOS	CHOSE3				; OBJECT DETECTED WITH SENSOR3 IS THE SMALLEST CURRENTLY
           0AF : 30B8;  -- 	JNEG	SEARCH5				; OBJECT IS NOT THE SMALLEST
           0B0 : 0C56;  -- 	LOAD	SENSOR3				; CURRENTSENOR <= SENSOR3
           0B1 : 1450;  -- 	STORE	CURRENTSENSOR
           0B2 : 0B33;  -- 	LOAD	Zero				; CURRENTANGLE <= 2
           0B3 : 1451;  -- 	STORE	CURRENTANGLE	
           0B4 : 0B34;  -- 	LOAD 	One					; UP <= 1
           0B5 : 1453;  -- 	STORE	UP
           0B6 : 1452;  -- 	STORE	LEFT				; LEFT <= 1
           0B7 : 28B8;  -- 	JUMP	SEARCH5	
           0B8 : 90AD;  -- 	IN 		DIST5				
           0B9 : 1458;  -- 	STORE	TEMPDIST
           0BA : 1459;  -- 	STORE	TEMPORARY
           0BB : 0C59;  -- 	LOAD	TEMPORARY
           0BC : 234A;  -- 	SUB		TWOFEET
           0BD : 234A;  -- 	SUB		TWOFEET		
           0BE : 30C2;  -- 	JNEG	FOUND5				; FOUND SOMETHING IN SENSOR5 LESS THAN 4 FEET AWAY WITH SENSOR5
           0BF : 0C66;  -- 	LOAD	FOUND				; DID NOT FIND ANYTHING IN SENSOR5, BUT THERE WAS SOMETHING FOUND PREVIOUSLY? 
           0C0 : 4066;  -- 	JZERO	FORWARD				; IF NO, MOVE FORWARD
           0C1 : 38D2;  -- 	JPOS	ROTATETOWARDSOBJECT	; IF YES, ROTATE TOWARDS THE CLOSEST OBJECT
           0C2 : 0B34;  -- 	LOAD	One
           0C3 : 1466;  -- 	STORE	FOUND
           0C4 : 0C58;  -- 	LOAD	TEMPDIST			
           0C5 : 1457;  -- 	STORE	SENSOR5
           0C6 : 28C7;  -- 	JUMP 	FINDSMALL5
           0C7 : 0C50;  -- 	LOAD	CURRENTSENSOR 		; IS SENSOR5 CLOSER THAN THE CURRENT SMALLEST?
           0C8 : 2457;  -- 	SUB		SENSOR5
           0C9 : 38CB;  -- 	JPOS	CHOSE5				; IF SENSOR5 IS CLOSER THAN THE CLOSEST SENSOR, STORE SENSOR5 AS THE CLOSEST
           0CA : 30D2;  -- 	JNEG	ROTATETOWARDSOBJECT	; ELSE, ROTATE TOWARDS THE CLOSEST OBJECT.
           0CB : 0C57;  -- 	LOAD	SENSOR5				; CURRENTSENSOR <= SENSOR5
           0CC : 1450;  -- 	STORE	CURRENTSENSOR
           0CD : 0B5B;  -- 	LOAD	NEGNINTY			; CURRENTANFLE <= -90
           0CE : 1451;  -- 	STORE	CURRENTANGLE
           0CF : 0B33;  -- 	LOAD	Zero				; LEFT <= 0
           0D0 : 1452;  -- 	STORE	LEFT
           0D1 : 28D2;  -- 	JUMP	ROTATETOWARDSOBJECT
           0D2 : 90C0;  -- 	IN 		XPOS
           0D3 : 9804;  -- 	OUT		SSEG1
           0D4 : 90C1;  -- 	IN 		YPOS
           0D5 : 9805;  -- 	OUT		SSEG2
           0D6 : 0C52;  -- 	LOAD	LEFT				; IF ON THE RIGHT OF THE ROBOT, TURN RIGHT; LEFT=0 MEANS THAT IT IS ON THE RIGHT
           0D7 : 40DA;  -- 	JZERO	ROTATERIGHT
           0D8 : 6FFF;  -- 	ADDI	-1					; IF ON THE LEFT OF THE ROBOT, TURN LEFT
           0D9 : 40E4;  -- 	JZERO	ROTATELEFT	
           0DA : 90C0;  -- 	IN 		XPOS
           0DB : 9804;  -- 	OUT		SSEG1
           0DC : 90C1;  -- 	IN 		YPOS
           0DD : 9805;  -- 	OUT		SSEG2
           0DE : 0B51;  -- 	LOAD	FMid				
           0DF : 9883;  -- 	OUT 	LVELCMD	
           0E0 : 90C2;  -- 	IN 		THETA
           0E1 : 2451;  -- 	SUB		CURRENTANGLE
           0E2 : 30DA;  -- 	JNEG	ROTATERIGHT
           0E3 : 28EE;  -- 	JUMP	MOVESETUP
           0E4 : 90C0;  -- 	IN 		XPOS
           0E5 : 9804;  -- 	OUT		SSEG1
           0E6 : 90C1;  -- 	IN 		YPOS
           0E7 : 9805;  -- 	OUT		SSEG2
           0E8 : 0B51;  -- 	LOAD	FMid			
           0E9 : 988B;  -- 	OUT		RVELCMD
           0EA : 90C2;  -- 	IN 		THETA 
           0EB : 2451;  -- 	SUB		CURRENTANGLE	
           0EC : 30E4;  -- 	JNEG	ROTATELEFT
           0ED : 28EE;  -- 	JUMP	MOVESETUP	
           0EE : 90C0;  -- 	IN		XPOS				; STORE THE CURRENT X POSITION OF THE ROBOT
           0EF : 145B;  -- 	STORE	X
           0F0 : 90C1;  -- 	IN		YPOS				; STORE THE CURRENT Y POSITION OF THE ROBOT
           0F1 : 145C;  -- 	STORE	Y
           0F2 : 28F3;  -- 	JUMP 	MOVETOWARDSOBJECT
           0F3 : 90C0;  -- 	IN 		XPOS
           0F4 : 9804;  -- 	OUT		SSEG1
           0F5 : 90C1;  -- 	IN 		YPOS
           0F6 : 9805;  -- 	OUT		SSEG2
           0F7 : 0B51;  -- 	LOAD	FMid				
           0F8 : 9883;  -- 	OUT    	LVELCMD     
           0F9 : 988B;  -- 	OUT    	RVELCMD	
           0FA : 0C50;  -- 	LOAD	CURRENTSENSOR		; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           0FB : 145D;  -- 	STORE 	TEMPVAR
           0FC : 90C0;  -- 	IN 		XPOS
           0FD : 1467;  -- 	STORE	TEMPX
           0FE : 90C1;  -- 	IN		YPOS
           0FF : 1468;  -- 	STORE	TEMPY
           100 : 0C5B;  -- 	LOAD	X					; L2X <- (X-XPOS) 
           101 : 2467;  -- 	SUB		TEMPX				
           102 : 12F2;  -- 	STORE	L2X
           103 : 0C5C;  -- 	LOAD	Y					; L2Y <- (Y-YPOS)
           104 : 2468;  -- 	SUB		TEMPY
           105 : 12F3;  -- 	STORE	L2Y
           106 : 82C8;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((X-XPOS)^2+(Y-YPOS)^2)
           107 : 245D;  -- 	SUB		TEMPVAR				; DISTANCE TO CLOSEST OBJECT
           108 : 1B61;  -- 	ADD		HALFFEET			; FOR CALIBRATION
           109 : 30F3;  -- 	JNEG	MOVETOWARDSOBJECT	; IF ROBOT HAS NOT ROTATED FAR ENOUGH, REPEAT
           10A : 90C0;  -- 	IN		XPOS				; XLOCATION = XPOS OF ROBOT AFTER IT REACHED THE OBJECT
           10B : 1469;  -- 	STORE	XLOCATION
           10C : 90C1;  -- 	IN		YPOS				; YLOCATION = YPOS OF ROBOT AFTER IT REACHED THE OBJECT
           10D : 146A;  -- 	STORE	YLOCATION
           10E : 0C53;  -- 	LOAD	UP					; IF THE ROBOT FOUND SOMETHING IN THE MIDDLE
           10F : 6FFF;  -- 	ADDI	-1
           110 : 4116;  -- 	JZERO	BACKUPUPSETUP
           111 : 0C52;  -- 	LOAD	LEFT				; IF THE ROBOT FOUND SOMETHING TO ITS RIGHT 
           112 : 412B;  -- 	JZERO	BACKUPRIGHTSETUP
           113 : 0C52;  -- 	LOAD	LEFT				; IF THE ROBOT FOUND SOMETHING TO ITS LEFT 
           114 : 6FFF;  -- 	ADDI	-1
           115 : 4140;  -- 	JZERO	BACKUPLEFTSETUP
           116 : 90C0;  -- 	IN 		XPOS
           117 : 9804;  -- 	OUT		SSEG1
           118 : 90C1;  -- 	IN 		YPOS
           119 : 9805;  -- 	OUT		SSEG2
           11A : 0C6A;  -- 	LOAD	YLOCATION
           11B : 2363;  -- 	SUB		TINYFEET
           11C : 146A;  -- 	STORE	YLOCATION
           11D : 291E;  -- 	JUMP	BACKUPUP
           11E : 90C0;  -- 	IN 		XPOS
           11F : 9804;  -- 	OUT		SSEG1
           120 : 90C1;  -- 	IN 		YPOS
           121 : 9805;  -- 	OUT		SSEG2
           122 : 0B52;  -- 	LOAD	RMid
           123 : 9883;  -- 	OUT		LVELCMD
           124 : 988B;  -- 	OUT		RVELCMD
           125 : 90C1;  -- 	IN		YPOS
           126 : 246A;  -- 	SUB		YLOCATION
           127 : 391E;  -- 	JPOS	BACKUPUP
           128 : 90C2;  -- 	IN		THETA					
           129 : 1462;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP 
           12A : 2957;  -- 	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           12B : 90C0;  -- 	IN 		XPOS
           12C : 9804;  -- 	OUT		SSEG1
           12D : 90C1;  -- 	IN 		YPOS
           12E : 9805;  -- 	OUT		SSEG2
           12F : 0C69;  -- 	LOAD	XLOCATION
           130 : 2363;  -- 	SUB		TINYFEET
           131 : 1469;  -- 	STORE	XLOCATION
           132 : 2933;  -- 	JUMP	BACKUPRIGHT
           133 : 90C0;  -- 	IN 		XPOS
           134 : 9804;  -- 	OUT		SSEG1
           135 : 90C1;  -- 	IN 		YPOS
           136 : 9805;  -- 	OUT		SSEG2
           137 : 0B52;  -- 	LOAD	RMid
           138 : 9883;  -- 	OUT		LVELCMD
           139 : 988B;  -- 	OUT		RVELCMD
           13A : 90C0;  -- 	IN		XPOS
           13B : 2469;  -- 	SUB		XLOCATION
           13C : 3933;  -- 	JPOS	BACKUPRIGHT
           13D : 90C2;  -- 	IN		THETA					
           13E : 1462;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP
           13F : 2957;  -- 	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           140 : 90C0;  -- 	IN 		XPOS
           141 : 9804;  -- 	OUT		SSEG1
           142 : 90C1;  -- 	IN 		YPOS
           143 : 9805;  -- 	OUT		SSEG2
           144 : 0C69;  -- 	LOAD	XLOCATION			
           145 : 1B63;  -- 	ADD		TINYFEET
           146 : 1469;  -- 	STORE	XLOCATION
           147 : 2948;  -- 	JUMP	BACKUPLEFT
           148 : 90C0;  -- 	IN 		XPOS
           149 : 9804;  -- 	OUT		SSEG1
           14A : 90C1;  -- 	IN 		YPOS
           14B : 9805;  -- 	OUT		SSEG2
           14C : 0B52;  -- 	LOAD	RMid
           14D : 9883;  -- 	OUT		LVELCMD
           14E : 988B;  -- 	OUT		RVELCMD
           14F : 90C0;  -- 	IN		XPOS
           150 : 2469;  -- 	SUB		XLOCATION
           151 : 3148;  -- 	JNEG	BACKUPLEFT
           152 : 82F7;  -- 	CALL	WAIT1
           153 : 82F7;  -- 	CALL	WAIT1
           154 : 90C2;  -- 	IN		THETA					
           155 : 1462;  -- 	STORE	TEMPTHETA			; STORE THE THETA AFTER BACKING UP 
           156 : 2957;  --  	JUMP	CALCHOMEANGLE		; THE ROBOT HAS ROTATED ENOUGH
           157 : 90C0;  -- 	IN 		XPOS
           158 : 9804;  -- 	OUT		SSEG1
           159 : 90C1;  -- 	IN 		YPOS
           15A : 9805;  -- 	OUT		SSEG2
           15B : 90C0;  -- 	IN		XPOS				; HOMEANGLE = ARCTAN(YPOS/XPOS)
           15C : 1260;  -- 	STORE	AtanX 
           15D : 90C1;  -- 	IN		YPOS
           15E : 1261;  -- 	STORE 	AtanY
           15F : 8201;  -- 	CALL	Atan2
           160 : 145F;  -- 	STORE	HOMEANGLE		
           161 : 0B4C;  -- 	LOAD	Deg180				; ANGLE FOR ROTATING RIGHT
           162 : 1C5F;  -- 	ADD		HOMEANGLE			; CORRECTANGLE = 180 + HOMEANGLE + 20
           163 : 146B;  -- 	STORE	CORRECTANGLE
           164 : 0B4B;  -- 	LOAD	Deg90				; ANGLE FOR WHEN THE ROBOT IS IN THE MIDDLE 
           165 : 1C5F;  -- 	ADD		HOMEANGLE			; UPANGLE = 90 + HOMEANGLE
           166 : 146C;  -- 	STORE	UPANGLE
           167 : 0C53;  -- 	LOAD	UP					; IF THE ROBOT IS IN THE MIDDLE
           168 : 6FFF;  -- 	ADDI	-1
           169 : 416F;  -- 	JZERO	HOMEROTATEUP
           16A : 0C52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE RIGHT OF THE ROBOT, TURN RIGHT TO FACE HOME
           16B : 4180;  -- 	JZERO	HOMEROTATERIGHT
           16C : 0C52;  -- 	LOAD	LEFT				; IF THE OBJECT IS TO THE LEFT OF THE ROBOT, TURN LEFT TO FACE HOME
           16D : 6FFF;  -- 	ADDI	-1
           16E : 4190;  -- 	JZERO	HOMEROTATELEFT
           16F : 90C0;  -- 	IN 		XPOS
           170 : 9804;  -- 	OUT		SSEG1
           171 : 90C1;  -- 	IN 		YPOS
           172 : 9805;  -- 	OUT		SSEG2
           173 : 0B51;  -- 	LOAD	FMid				; ROTATE CORRECT DEGREES TO THE LEFT
           174 : 988B;  -- 	OUT		RVELCMD
           175 : 90C2;  -- 	IN 		THETA 
           176 : 2462;  -- 	SUB		TEMPTHETA
           177 : 246C;  -- 	SUB		UPANGLE	
           178 : 316F;  -- 	JNEG	HOMEROTATEUP
           179 : 90C0;  -- 	IN 		XPOS				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           17A : 1463;  -- 	STORE	GOHOMEX				
           17B : 90C1;  -- 	IN		YPOS				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME
           17C : 1464;  -- 	STORE	GOHOMEY	
           17D : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           17E : 1462;  -- 	STORE	TEMPTHETA
           17F : 29A1;  -- 	JUMP	CALCHOMEDIST
           180 : 90C0;  -- 	IN 		XPOS
           181 : 9804;  -- 	OUT		SSEG1
           182 : 90C1;  -- 	IN 		YPOS
           183 : 9805;  -- 	OUT		SSEG2
           184 : 0B51;  -- 	LOAD	FMid
           185 : 9883;  -- 	OUT 	LVELCMD
           186 : 90C2;  -- 	IN		THETA				
           187 : 246B;  -- 	SUB		CORRECTANGLE
           188 : 3980;  -- 	JPOS	HOMEROTATERIGHT
           189 : 90C0;  -- 	IN 		XPOS				
           18A : 1463;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           18B : 90C1;  -- 	IN		YPOS
           18C : 1464;  -- 	STORE	GOHOMEY				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           18D : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT AFTER IT ROTATES TOWARDS HOME
           18E : 1462;  -- 	STORE	TEMPTHETA
           18F : 29A1;  -- 	JUMP	CALCHOMEDIST
           190 : 90C0;  -- 	IN 		XPOS
           191 : 9804;  -- 	OUT		SSEG1
           192 : 90C1;  -- 	IN 		YPOS
           193 : 9805;  -- 	OUT		SSEG2
           194 : 0B51;  -- 	LOAD	FMid				; ROTATE CORRECT DEGREES TO THE LEFT TO FACE HOME
           195 : 988B;  -- 	OUT		RVELCMD
           196 : 90C2;  -- 	IN 		THETA 
           197 : 2462;  -- 	SUB		TEMPTHETA
           198 : 245F;  -- 	SUB		HOMEANGLE	
           199 : 3190;  -- 	JNEG	HOMEROTATELEFT
           19A : 90C0;  -- 	IN 		XPOS				
           19B : 1463;  -- 	STORE	GOHOMEX				; X POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           19C : 90C1;  -- 	IN		YPOS
           19D : 1464;  -- 	STORE	GOHOMEY				; Y POSITION OF ROBOT AFTER IT ROTATES TOWARDS HOME 
           19E : 90C2;  -- 	IN 		THETA				; STORE THE THETA OF THE ROBOT AFTER IT ROTATES TOWARDS HOME
           19F : 1462;  -- 	STORE	TEMPTHETA
           1A0 : 29A1;  -- 	JUMP	CALCHOMEDIST
           1A1 : 90C0;  -- 	IN		XPOS
           1A2 : 12F2;  -- 	STORE 	L2X
           1A3 : 90C1;  -- 	IN		YPOS
           1A4 : 12F3;  -- 	STORE	L2Y
           1A5 : 82C8;  -- 	CALL	L2Estimate			
           1A6 : 145E;  -- 	STORE	HOMEDIST			; HOMEDIST = SQRT((RESETX-XPOS)^2+(RESETX-YPOS)^2)
           1A7 : 29A8;  -- 	JUMP	GOHOME
           1A8 : 90C0;  -- 	IN 		XPOS
           1A9 : 9804;  -- 	OUT		SSEG1
           1AA : 90C1;  -- 	IN 		YPOS
           1AB : 9805;  -- 	OUT		SSEG2
           1AC : 0B51;  -- 	LOAD	FMid				; MOVE FORWARD TO GO HOME 
           1AD : 9883;  -- 	OUT    	LVELCMD     
           1AE : 988B;  -- 	OUT    	RVELCMD	
           1AF : 90C0;  -- 	IN		XPOS
           1B0 : 1467;  -- 	STORE	TEMPX
           1B1 : 90C1;  -- 	IN		YPOS
           1B2 : 1468;  -- 	STORE	TEMPY
           1B3 : 0C5E;  -- 	LOAD	HOMEDIST			; STORE THE DISTANCE OF CLOSEST OBJECT TO TEMPVAR
           1B4 : 1465;  -- 	STORE 	TEMPHOME
           1B5 : 0C63;  -- 	LOAD	GOHOMEX				; L2X <- (GOHOMEX-XPOS) 
           1B6 : 2467;  -- 	SUB		TEMPX				
           1B7 : 12F2;  -- 	STORE	L2X
           1B8 : 0C64;  -- 	LOAD	GOHOMEY				; L2Y <- (GOHOMEY-YPOS)
           1B9 : 2468;  -- 	SUB		TEMPY
           1BA : 12F3;  -- 	STORE	L2Y
           1BB : 82C8;  -- 	CALL	L2Estimate			; L2Estimate = SQRT((XPOS-X)^2+(YPOS-Y)^2)
           1BC : 2465;  -- 	SUB		TEMPHOME	
           1BD : 1B61;  -- 	ADD		HALFFEET		
           1BE : 31A8;  -- 	JNEG	GOHOME				; HAS NOT REACHED HOME YET
           1BF : 82F7;  -- 	CALL	WAIT1
           1C0 : 82F7;  -- 	CALL	WAIT1
           1C1 : 82F7;  -- 	CALL	WAIT1
           1C2 : 82F7;  -- 	CALL	WAIT1
           1C3 : 82F7;  -- 	CALL 	WAIT1
           1C4 : 29CC;  -- 	JUMP 	DIE
           1C5 : 0800;  -- 	LOAD	0
           1C6 : 980A;  -- 	OUT		BEEP	
           1C7 : 29C5;  -- 	JUMP 	NOISE
           1C8 : 0800;  -- 	LOAD	0
           1C9 : 9883;  -- 	OUT    	LVELCMD     
           1CA : 988B;  -- 	OUT    	RVELCMD	
           1CB : 29C8;  -- 	JUMP 	NOPE
           1CC : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           1CD : 0B33;  -- 	LOAD   Zero         ; Stop everything.
           1CE : 9883;  -- 	OUT    LVELCMD
           1CF : 988B;  -- 	OUT    RVELCMD
           1D0 : 98B2;  -- 	OUT    SONAREN
           1D1 : 09D4;  -- 	LOAD   DEAD         ; An indication that we are dead
           1D2 : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           1D3 : 29D3;  -- 	JUMP   Forever      ; Do this forever.
           1D4 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           1D5 : 81D9;  -- 	CALL   ControlMovement
           1D6 : B000;  -- 	RETI   ; return from ISR
           1D7 : 0000;  -- DTheta:    DW 0
           1D8 : 0000;  -- DVel:      DW 0
           1D9 : 90C2;  -- 	IN     THETA
           1DA : 21D7;  -- 	SUB    DTheta      ; actual - desired angle
           1DB : 81FE;  -- 	CALL   Neg         ; desired - actual angle
           1DC : 68B4;  -- 	ADDI   180
           1DD : 81F7;  -- 	CALL   Mod360
           1DE : 6F4C;  -- 	ADDI   -180
           1DF : 6002;  -- 	SHIFT  2
           1E0 : 11EB;  -- 	STORE  CMAErr      ; hold temporarily
           1E1 : 09D8;  -- 	LOAD   DVel
           1E2 : 19EB;  -- 	ADD    CMAErr
           1E3 : 81EC;  -- 	CALL   CapVel      ; ensure velocity is valid
           1E4 : 988B;  -- 	OUT    RVELCMD
           1E5 : 09EB;  -- 	LOAD   CMAErr
           1E6 : 81FE;  -- 	CALL   Neg         ; left wheel gets negative differential
           1E7 : 19D8;  -- 	ADD    DVel
           1E8 : 81EC;  -- 	CALL   CapVel
           1E9 : 9883;  -- 	OUT    LVELCMD
           1EA : 8800;  -- 	RETURN
           1EB : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           1EC : 6E0C;  -- 	ADDI    -500
           1ED : 39F3;  -- 	JPOS    CapVelHigh
           1EE : 69F4;  -- 	ADDI    500
           1EF : 69F4;  -- 	ADDI    500
           1F0 : 31F5;  -- 	JNEG    CapVelLow
           1F1 : 6E0C;  -- 	ADDI    -500
           1F2 : 8800;  -- 	RETURN
           1F3 : B9F4;  -- 	LOADI   500
           1F4 : 8800;  -- 	RETURN
           1F5 : BE0C;  -- 	LOADI   -500
           1F6 : 8800;  -- 	RETURN
           1F7 : 31FA;  -- 	JNEG   M360N
           1F8 : 6E98;  -- 	ADDI   -360
           1F9 : 29F7;  -- 	JUMP   Mod360
           1FA : 6968;  -- 	ADDI   360
           1FB : 31FA;  -- 	JNEG   M360N
           1FC : 8800;  -- 	RETURN
           1FD : 3A00;  -- 	JPOS   Abs_r
           1FE : 5B32;  -- 	XOR    NegOne       ; Flip all bits
           1FF : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           200 : 8800;  -- 	RETURN
           201 : 0A61;  -- 	LOAD   AtanY
           202 : 81FD;  -- 	CALL   Abs          ; abs(y)
           203 : 1263;  -- 	STORE  AtanT
           204 : 0A60;  -- 	LOAD   AtanX        ; abs(x)
           205 : 81FD;  -- 	CALL   Abs
           206 : 2263;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           207 : 3212;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           208 : 0A60;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           209 : 320F;  -- 	JNEG   A2_R3
           20A : 8221;  -- 	CALL   A2_calc      ; Octants 1, 8
           20B : 320D;  -- 	JNEG   A2_R1n
           20C : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           20D : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           20E : 8800;  -- 	RETURN
           20F : 8221;  -- 	CALL   A2_calc      ; Octants 4, 5            
           210 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           211 : 8800;  -- 	RETURN
           212 : 0A61;  -- 	LOAD   AtanY        ; Swap input arguments
           213 : 1263;  -- 	STORE  AtanT
           214 : 0A60;  -- 	LOAD   AtanX
           215 : 1261;  -- 	STORE  AtanY
           216 : 0A63;  -- 	LOAD   AtanT
           217 : 1260;  -- 	STORE  AtanX
           218 : 3A1D;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           219 : 8221;  -- 	CALL   A2_calc      ; else octants 6, 7
           21A : 81FE;  -- 	CALL   Neg          ; Negatge the number
           21B : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           21C : 8800;  -- 	RETURN
           21D : 8221;  -- 	CALL   A2_calc      ; Octants 2, 3
           21E : 81FE;  -- 	CALL   Neg          ; negate the angle
           21F : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           220 : 8800;  -- 	RETURN
           221 : 0A61;  -- 	LOAD   AtanY
           222 : 12C0;  -- 	STORE  d16sN        ; Y in numerator
           223 : 0A60;  -- 	LOAD   AtanX
           224 : 12C1;  -- 	STORE  d16sD        ; X in denominator
           225 : 824D;  -- 	CALL   A2_div       ; divide
           226 : 0AC6;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           227 : 1262;  -- 	STORE  AtanRatio
           228 : 1289;  -- 	STORE  m16sA
           229 : 128A;  -- 	STORE  m16sB
           22A : 8244;  -- 	CALL   A2_mult      ; X^2
           22B : 1289;  -- 	STORE  m16sA
           22C : 0A64;  -- 	LOAD   A2c
           22D : 128A;  -- 	STORE  m16sB
           22E : 8244;  -- 	CALL   A2_mult
           22F : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           230 : 12C1;  -- 	STORE  d16sD
           231 : 0A62;  -- 	LOAD   AtanRatio
           232 : 12C0;  -- 	STORE  d16sN        ; Ratio in numerator
           233 : 824D;  -- 	CALL   A2_div       ; divide
           234 : 0AC6;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           235 : 1289;  -- 	STORE  m16sA        ; <= result in radians
           236 : 0A65;  -- 	LOAD   A2cd         ; degree conversion factor
           237 : 128A;  -- 	STORE  m16sB
           238 : 8244;  -- 	CALL   A2_mult      ; convert to degrees
           239 : 1263;  -- 	STORE  AtanT
           23A : 6017;  -- 	SHIFT  -7           ; check 7th bit
           23B : 4B34;  -- 	AND    One
           23C : 4241;  -- 	JZERO  A2_rdwn      ; round down
           23D : 0A63;  -- 	LOAD   AtanT
           23E : 6018;  -- 	SHIFT  -8
           23F : 6801;  -- 	ADDI   1            ; round up
           240 : 8800;  -- 	RETURN
           241 : 0A63;  -- 	LOAD   AtanT
           242 : 6018;  -- 	SHIFT  -8           ; round down
           243 : 8800;  -- 	RETURN
           244 : 8266;  -- 	CALL   Mult16s
           245 : 0A8E;  -- 	LOAD   mres16sH
           246 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           247 : 128E;  -- 	STORE  mres16sH
           248 : 0A8D;  -- 	LOAD   mres16sL
           249 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           24A : 4B46;  -- 	AND    LowByte
           24B : 528E;  -- 	OR     mres16sH     ; combine high and low words of result
           24C : 8800;  -- 	RETURN
           24D : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           24E : 1263;  -- 	STORE  AtanT
           24F : 0A63;  -- 	LOAD   AtanT
           250 : 6FFF;  -- 	ADDI   -1
           251 : 3A54;  -- 	JPOS   A2_DN        ; not done; continue shifting
           252 : 828F;  -- 	CALL   Div16s       ; do the standard division
           253 : 8800;  -- 	RETURN
           254 : 1263;  -- 	STORE  AtanT
           255 : 0AC0;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           256 : 6001;  -- 	SHIFT  1
           257 : 5AC0;  -- 	XOR    d16sN        ; if the sign changed,
           258 : 325C;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           259 : 5AC0;  -- 	XOR    d16sN        ; get back shifted version
           25A : 12C0;  -- 	STORE  d16sN
           25B : 2A4F;  -- 	JUMP   A2_DL
           25C : 0AC1;  -- 	LOAD   d16sD
           25D : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           25E : 12C1;  -- 	STORE  d16sD
           25F : 2A4F;  -- 	JUMP   A2_DL
           260 : 0000;  -- AtanX:      DW 0
           261 : 0000;  -- AtanY:      DW 0
           262 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           263 : 0000;  -- AtanT:      DW 0        ; temporary value
           264 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           265 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           266 : B800;  -- 	LOADI  0
           267 : 128B;  -- 	STORE  m16sc        ; clear carry
           268 : 128E;  -- 	STORE  mres16sH     ; clear result
           269 : B810;  -- 	LOADI  16           ; load 16 to counter
           26A : 128C;  -- 	STORE  mcnt16s      
           26B : 0A8B;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           26C : 4270;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           26D : 0A8E;  -- 	LOAD   mres16sH     ; if a carry, 
           26E : 1A89;  -- 	ADD    m16sA        ;  add multiplicand to result H
           26F : 128E;  -- 	STORE  mres16sH
           270 : 0A8A;  -- 	LOAD   m16sB
           271 : 4B34;  -- 	AND    One          ; check bit 0 of multiplier
           272 : 128B;  -- 	STORE  m16sc        ; save as next carry
           273 : 4277;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           274 : 0A8E;  -- 	LOAD   mres16sH     ; if bit 0 set,
           275 : 2289;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           276 : 128E;  -- 	STORE  mres16sH
           277 : 0A8A;  -- 	LOAD   m16sB
           278 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           279 : 4A88;  -- 	AND    c7FFF        ; clear msb
           27A : 128A;  -- 	STORE  m16sB
           27B : 0A8E;  -- 	LOAD   mres16sH     ; load result H
           27C : 600F;  -- 	SHIFT  15           ; move lsb to msb
           27D : 528A;  -- 	OR     m16sB
           27E : 128A;  -- 	STORE  m16sB        ; result L now includes carry out from H
           27F : 0A8E;  -- 	LOAD   mres16sH
           280 : 6011;  -- 	SHIFT  -1
           281 : 128E;  -- 	STORE  mres16sH     ; shift result H >>1
           282 : 0A8C;  -- 	LOAD   mcnt16s
           283 : 6FFF;  -- 	ADDI   -1           ; check counter
           284 : 3A6A;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           285 : 0A8A;  -- 	LOAD   m16sB
           286 : 128D;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           287 : 8800;  -- 	RETURN              ; Done
           288 : 7FFF;  -- c7FFF: DW &H7FFF
           289 : 0000;  -- m16sA: DW 0 ; multiplicand
           28A : 0000;  -- m16sB: DW 0 ; multipler
           28B : 0000;  -- m16sc: DW 0 ; carry
           28C : 0000;  -- mcnt16s: DW 0 ; counter
           28D : 0000;  -- mres16sL: DW 0 ; result low
           28E : 0000;  -- mres16sH: DW 0 ; result high
           28F : B800;  -- 	LOADI  0
           290 : 12C7;  -- 	STORE  dres16sR     ; clear remainder result
           291 : 12C4;  -- 	STORE  d16sC1       ; clear carry
           292 : 0AC0;  -- 	LOAD   d16sN
           293 : 5AC1;  -- 	XOR    d16sD
           294 : 12C2;  -- 	STORE  d16sS        ; sign determination = N XOR D
           295 : B811;  -- 	LOADI  17
           296 : 12C3;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           297 : 0AC1;  -- 	LOAD   d16sD
           298 : 81FD;  -- 	CALL   Abs          ; take absolute value of denominator
           299 : 12C1;  -- 	STORE  d16sD
           29A : 0AC0;  -- 	LOAD   d16sN
           29B : 81FD;  -- 	CALL   Abs          ; take absolute value of numerator
           29C : 12C0;  -- 	STORE  d16sN
           29D : 0AC0;  -- 	LOAD   d16sN
           29E : 601F;  -- 	SHIFT  -15          ; get msb
           29F : 4B34;  -- 	AND    One          ; only msb (because shift is arithmetic)
           2A0 : 12C5;  -- 	STORE  d16sC2       ; store as carry
           2A1 : 0AC0;  -- 	LOAD   d16sN
           2A2 : 6001;  -- 	SHIFT  1            ; shift <<1
           2A3 : 52C4;  -- 	OR     d16sC1       ; with carry
           2A4 : 12C0;  -- 	STORE  d16sN
           2A5 : 0AC3;  -- 	LOAD   d16sT
           2A6 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           2A7 : 42B7;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           2A8 : 12C3;  -- 	STORE  d16sT
           2A9 : 0AC7;  -- 	LOAD   dres16sR
           2AA : 6001;  -- 	SHIFT  1            ; shift remainder
           2AB : 52C5;  -- 	OR     d16sC2       ; with carry from other shift
           2AC : 22C1;  -- 	SUB    d16sD        ; subtract denominator from remainder
           2AD : 32B2;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           2AE : 12C7;  -- 	STORE  dres16sR
           2AF : B801;  -- 	LOADI  1
           2B0 : 12C4;  -- 	STORE  d16sC1       ; set carry
           2B1 : 2A9D;  -- 	JUMP   Div16s_loop
           2B2 : 1AC1;  -- 	ADD    d16sD        ; add denominator back in
           2B3 : 12C7;  -- 	STORE  dres16sR
           2B4 : B800;  -- 	LOADI  0
           2B5 : 12C4;  -- 	STORE  d16sC1       ; clear carry
           2B6 : 2A9D;  -- 	JUMP   Div16s_loop
           2B7 : 0AC0;  -- 	LOAD   d16sN
           2B8 : 12C6;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           2B9 : 0AC2;  -- 	LOAD   d16sS        ; check the sign indicator
           2BA : 32BC;  -- 	JNEG   Div16s_neg
           2BB : 8800;  -- 	RETURN
           2BC : 0AC6;  -- 	LOAD   dres16sQ     ; need to negate the result
           2BD : 81FE;  -- 	CALL   Neg
           2BE : 12C6;  -- 	STORE  dres16sQ
           2BF : 8800;  -- 	RETURN	
           2C0 : 0000;  -- d16sN: DW 0 ; numerator
           2C1 : 0000;  -- d16sD: DW 0 ; denominator
           2C2 : 0000;  -- d16sS: DW 0 ; sign value
           2C3 : 0000;  -- d16sT: DW 0 ; temp counter
           2C4 : 0000;  -- d16sC1: DW 0 ; carry value
           2C5 : 0000;  -- d16sC2: DW 0 ; carry value
           2C6 : 0000;  -- dres16sQ: DW 0 ; quotient result
           2C7 : 0000;  -- dres16sR: DW 0 ; remainder result
           2C8 : 0AF2;  -- 	LOAD   L2X
           2C9 : 81FD;  -- 	CALL   Abs
           2CA : 12F4;  -- 	STORE  L2T1
           2CB : 0AF3;  -- 	LOAD   L2Y
           2CC : 81FD;  -- 	CALL   Abs
           2CD : 22F4;  -- 	SUB    L2T1
           2CE : 32EA;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           2CF : 1AF4;  -- 	ADD    L2T1
           2D0 : 1289;  -- 	STORE  m16sa
           2D1 : B8F6;  -- 	LOADI  246       ; max * 246
           2D2 : 128A;  -- 	STORE  m16sB
           2D3 : 8266;  -- 	CALL   Mult16s
           2D4 : 0A8E;  -- 	LOAD   mres16sH
           2D5 : 6008;  -- 	SHIFT  8
           2D6 : 12F5;  -- 	STORE  L2T2
           2D7 : 0A8D;  -- 	LOAD   mres16sL
           2D8 : 6018;  -- 	SHIFT  -8        ; / 256
           2D9 : 4B46;  -- 	AND    LowByte
           2DA : 52F5;  -- 	OR     L2T2
           2DB : 12F6;  -- 	STORE  L2T3
           2DC : 0AF4;  -- 	LOAD   L2T1
           2DD : 1289;  -- 	STORE  m16sa
           2DE : B868;  -- 	LOADI  104       ; min * 104
           2DF : 128A;  -- 	STORE  m16sB
           2E0 : 8266;  -- 	CALL   Mult16s
           2E1 : 0A8E;  -- 	LOAD   mres16sH
           2E2 : 6008;  -- 	SHIFT  8
           2E3 : 12F5;  -- 	STORE  L2T2
           2E4 : 0A8D;  -- 	LOAD   mres16sL
           2E5 : 6018;  -- 	SHIFT  -8        ; / 256
           2E6 : 4B46;  -- 	AND    LowByte
           2E7 : 52F5;  -- 	OR     L2T2
           2E8 : 1AF6;  -- 	ADD    L2T3     ; sum
           2E9 : 8800;  -- 	RETURN
           2EA : 1AF4;  -- 	ADD    L2T1
           2EB : 12F5;  -- 	STORE  L2T2
           2EC : 0AF4;  -- 	LOAD   L2T1
           2ED : 12F6;  -- 	STORE  L2T3
           2EE : 0AF5;  -- 	LOAD   L2T2
           2EF : 12F4;  -- 	STORE  L2T1
           2F0 : 0AF6;  -- 	LOAD   L2T3
           2F1 : 2AD0;  -- 	JUMP   CalcDist
           2F2 : 0000;  -- L2X:  DW 0
           2F3 : 0000;  -- L2Y:  DW 0
           2F4 : 0000;  -- L2T1: DW 0
           2F5 : 0000;  -- L2T2: DW 0
           2F6 : 0000;  -- L2T3: DW 0
           2F7 : 9802;  -- 	OUT    TIMER
           2F8 : 9002;  -- 	IN     TIMER
           2F9 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           2FA : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           2FB : 32F8;  -- 	JNEG   Wloop
           2FC : 8800;  -- 	RETURN
           2FD : 8315;  -- 	CALL   GetBattLvl
           2FE : 42FD;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           2FF : 2355;  -- 	SUB    MinBatt
           300 : 3303;  -- 	JNEG   DeadBatt
           301 : 1B55;  -- 	ADD    MinBatt     ; get original value back
           302 : 8800;  -- 	RETURN
           303 : B820;  -- 	LOADI  &H20
           304 : 980A;  -- 	OUT    BEEP        ; start beep sound
           305 : 8315;  -- 	CALL   GetBattLvl  ; get the battery level
           306 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           307 : 9805;  -- 	OUT    SSEG2
           308 : 9806;  -- 	OUT    LCD
           309 : 0B33;  -- 	LOAD   Zero
           30A : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           30B : 9801;  -- 	OUT    LEDS        ; all LEDs on
           30C : 9807;  -- 	OUT    XLEDS
           30D : 82F7;  -- 	CALL   Wait1       ; 1 second
           30E : 0B33;  -- 	Load   Zero
           30F : 980A;  -- 	OUT    BEEP        ; stop beeping
           310 : 0B33;  -- 	LOAD   Zero
           311 : 9801;  -- 	OUT    LEDS        ; LEDs off
           312 : 9807;  -- 	OUT    XLEDS
           313 : 82F7;  -- 	CALL   Wait1       ; 1 second
           314 : 2B03;  -- 	JUMP   DeadBatt    ; repeat forever
           315 : 0B57;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           316 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           317 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           318 : 8323;  -- 	CALL   BlockI2C    ; wait for it to finish
           319 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           31A : 8800;  -- 	RETURN
           31B : 8323;  -- 	CALL   BlockI2C    ; wait for idle
           31C : 0B56;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           31D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           31E : 0B33;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           31F : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           320 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           321 : 8323;  -- 	CALL   BlockI2C    ; wait for it to finish
           322 : 8800;  -- 	RETURN
           323 : 0B33;  -- 	LOAD   Zero
           324 : 1331;  -- 	STORE  Temp        ; Used to check for timeout
           325 : 0B31;  -- 	LOAD   Temp
           326 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           327 : 1331;  -- 	STORE  Temp
           328 : 432C;  -- 	JZERO  I2CError    ; Timeout occurred; error
           329 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           32A : 3B25;  -- 	JPOS   BI2CL       ; If not 0, try again
           32B : 8800;  -- 	RETURN             ; Else return
           32C : 0B33;  -- 	LOAD   Zero
           32D : 692C;  -- 	ADDI   &H12C       ; "I2C"
           32E : 9804;  -- 	OUT    SSEG1
           32F : 9805;  -- 	OUT    SSEG2       ; display error message
           330 : 2B2C;  -- 	JUMP   I2CError
           331 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           332 : FFFF;  -- NegOne:   DW -1
           333 : 0000;  -- Zero:     DW 0
           334 : 0001;  -- One:      DW 1
           335 : 0002;  -- Two:      DW 2
           336 : 0003;  -- Three:    DW 3
           337 : 0004;  -- Four:     DW 4
           338 : 0005;  -- Five:     DW 5
           339 : 0006;  -- Six:      DW 6
           33A : 0007;  -- Seven:    DW 7
           33B : 0008;  -- Eight:    DW 8
           33C : 0009;  -- Nine:     DW 9
           33D : 000A;  -- Ten:      DW 10
           33E : 0001;  -- Mask0:    DW &B00000001
           33F : 0002;  -- Mask1:    DW &B00000010
           340 : 0004;  -- Mask2:    DW &B00000100
           341 : 0008;  -- Mask3:    DW &B00001000
           342 : 0010;  -- Mask4:    DW &B00010000
           343 : 0020;  -- Mask5:    DW &B00100000
           344 : 0040;  -- Mask6:    DW &B01000000
           345 : 0080;  -- Mask7:    DW &B10000000
           346 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           347 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           348 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           349 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           34A : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           34B : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           34C : 00B4;  -- Deg180:   DW 180       ; 180
           34D : 010E;  -- Deg270:   DW 270       ; 270
           34E : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           34F : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           350 : FF9C;  -- RSlow:    DW -100
           351 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           352 : FEA2;  -- RMid:     DW -350
           353 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           354 : FE0C;  -- RFast:    DW -500
           355 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           356 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           357 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           358 : 0096;  -- NINTY:			DW		150
           359 : 002C;  -- FOURTYFOUR:		DW		44
           35A : 000C;  -- TWELVE:			DW		12
           35B : 010E;  -- NEGNINTY:		DW		270
           35C : 013C;  -- NEGFOURTYFOUR:	DW		316
           35D : 015C;  -- NEGTWELVE:		DW		348
           35E : 270F;  -- EEEE:			DW		9999
           35F : AAAA;  -- AAAA:			DW		&HAAAA
           360 : FFFF;  -- FFFF:			DW		&HFFFF
           361 : 0092;  -- HALFFEET:		DW		146       
           362 : 0167;  -- THREEFIVENINE:	DW		359
           363 : 0032;  -- TINYFEET:		DW		50
           450 : 270F;  -- CURRENTSENSOR:	DW		9999		; CURRENT SENSOR USED FOR CALCULATIONS
           451 : 0000;  -- CURRENTANGLE:	DW		0			; CURRENT ANGLE OF THE SENSOR
           452 : 0001;  -- LEFT:			DW		1			; 1 == LEFT; 0 = RIGHT
           453 : 0000;  -- UP:				DW		0			; 1 == UP; 0 == LEFT/RIGHT
           454 : FFFF;  -- SENSOR0:		DW		&HFFFF
           455 : FFFF;  -- SENSOR2:		DW		&HFFFF
           456 : FFFF;  -- SENSOR3:		DW		&HFFFF
           457 : FFFF;  -- SENSOR5:		DW		&HFFFF
           458 : FFFF;  -- TEMPDIST:		DW		&HFFFF		; USED FOR CALCULATIONS
           459 : FFFF;  -- TEMPORARY:		DW		&HFFFF	
           45A : 0000;  -- CALCTHETA:		DW		0
           45B : 0000;  -- X:				DW		0			; X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           45C : 0000;  -- Y:				DW		0			; Y POSITION OF ROBOT AFTER IT FOES UP THE MIDDLE 
           45D : 0000;  -- TEMPVAR:		DW		0			; DISTANCE FROM ROBOT TO CLOSEST OBJECT
           45E : 0000;  -- HOMEDIST:		DW		0			; DISTANCE FROM THE ROBOT TO HOMEBASE
           45F : 0000;  -- HOMEANGLE:		DW		0			; ANGLE FROM ROBOT TO HOMEBASE
           460 : 0000;  -- CALCX:			DW		0		
           461 : 0000;  -- CALCY:			DW		0
           462 : 0000;  -- TEMPTHETA:		DW		0			; THE THETA OF THE ROBOT BEFORE IT ROTATES TOWARDS HOME
           463 : 0000;  -- GOHOMEX:		DW		0			;X POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           464 : 0000;  -- GOHOMEY:		DW		0			;Y POSITION OF ROBOT AFTER IT GOES UP THE MIDDLE
           465 : 0000;  -- TEMPHOME:		DW		0
           466 : 0000;  -- FOUND:			DW		0			; IF SOMETHING IS FOUND, FOUND=1. ELSE, FOUND=0
           467 : 0000;  -- TEMPX:			DW		0
           468 : 0000;  -- TEMPY:			DW		0
           469 : 0000;  -- XLOCATION:		DW		0
           46A : 0000;  -- YLOCATION:		DW		0
           46B : 0000;  -- CORRECTANGLE:	DW		0
           46C : 0000;  -- UPANGLE:		DW		0
  END;
